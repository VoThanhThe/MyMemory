"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Web3Modal = void 0;
var _ethers = require("ethers");
var _scaffoldReactNative = require("@web3modal/scaffold-react-native");
var _scaffoldUtilsReactNative = require("@web3modal/scaffold-utils-react-native");
var _ethereumProvider = _interopRequireDefault(require("@walletconnect/ethereum-provider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// -- Types ---------------------------------------------------------------------

// @ts-expect-error: Overriden state type is correct

// -- Client --------------------------------------------------------------------
class Web3Modal extends _scaffoldReactNative.Web3ModalScaffold {
  hasSyncedConnectedAccount = false;
  options = undefined;
  constructor(options) {
    const {
      config,
      chains,
      defaultChain,
      tokens,
      chainImages,
      _sdkVersion,
      ...w3mOptions
    } = options;
    if (!config) {
      throw new Error('web3modal:constructor - config is undefined');
    }
    if (!w3mOptions.projectId) {
      throw new Error('web3modal:constructor - projectId is undefined');
    }
    const networkControllerClient = {
      switchCaipNetwork: async caipNetwork => {
        const chainId = _scaffoldUtilsReactNative.HelpersUtil.caipNetworkIdToNumber(caipNetwork?.id);
        if (chainId) {
          try {
            await this.switchNetwork(chainId);
          } catch (error) {
            _scaffoldUtilsReactNative.EthersStoreUtil.setError(error);
          }
        }
      },
      getApprovedCaipNetworksData: async () => new Promise(async resolve => {
        const walletChoice = await _scaffoldUtilsReactNative.StorageUtil.getConnectedConnector();
        const walletConnectType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID];
        if (walletChoice?.includes(walletConnectType)) {
          const provider = await this.getWalletConnectProvider();
          if (!provider) {
            throw new Error('networkControllerClient:getApprovedCaipNetworks - provider is undefined');
          }
          const ns = provider.signer?.session?.namespaces;
          const nsMethods = ns?.[_scaffoldUtilsReactNative.ConstantsUtil.EIP155]?.methods;
          const nsChains = ns?.[_scaffoldUtilsReactNative.ConstantsUtil.EIP155]?.chains;
          const result = {
            supportsAllNetworks: nsMethods?.includes(_scaffoldUtilsReactNative.ConstantsUtil.ADD_CHAIN_METHOD) ?? false,
            approvedCaipNetworkIds: nsChains
          };
          resolve(result);
        } else {
          const result = {
            approvedCaipNetworkIds: undefined,
            supportsAllNetworks: true
          };
          resolve(result);
        }
      })
    };
    const connectionControllerClient = {
      connectWalletConnect: async onUri => {
        const WalletConnectProvider = await this.getWalletConnectProvider();
        if (!WalletConnectProvider) {
          throw new Error('connectionControllerClient:getWalletConnectUri - provider is undefined');
        }
        WalletConnectProvider.on('display_uri', uri => {
          onUri(uri);
        });
        await WalletConnectProvider.connect();
        await this.setWalletConnectProvider();
      },
      //  @ts-expect-error TODO expected types in arguments are incomplete
      connectExternal: async ({
        id
      }) => {
        if (id === _scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID) {
          const CoinbaseProvider = config.coinbase;
          if (!CoinbaseProvider) {
            throw new Error('connectionControllerClient:connectCoinbase - connector is undefined');
          }
          try {
            await CoinbaseProvider.request({
              method: 'eth_requestAccounts'
            });
            await this.setCoinbaseProvider(config);
          } catch (error) {
            _scaffoldUtilsReactNative.EthersStoreUtil.setError(error);
          }
        }
      },
      disconnect: async () => {
        const provider = _scaffoldUtilsReactNative.EthersStoreUtil.state.provider;
        const providerType = _scaffoldUtilsReactNative.EthersStoreUtil.state.providerType;
        const walletConnectType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID];
        if (providerType === walletConnectType) {
          const WalletConnectProvider = provider;
          await WalletConnectProvider.disconnect();
        } else if (provider) {
          provider.emit('disconnect');
        }
        _scaffoldUtilsReactNative.StorageUtil.removeItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
        _scaffoldUtilsReactNative.EthersStoreUtil.reset();
      },
      signMessage: async message => {
        const provider = _scaffoldUtilsReactNative.EthersStoreUtil.state.provider;
        if (!provider) {
          throw new Error('connectionControllerClient:signMessage - provider is undefined');
        }
        const signature = await provider.request({
          method: 'personal_sign',
          params: [message, this.getAddress()]
        });
        return signature;
      }
    };
    super({
      networkControllerClient,
      connectionControllerClient,
      defaultChain: _scaffoldUtilsReactNative.EthersHelpersUtil.getCaipDefaultChain(defaultChain),
      tokens: _scaffoldUtilsReactNative.HelpersUtil.getCaipTokens(tokens),
      _sdkVersion: _sdkVersion ?? `react-native-ethers5-${_scaffoldUtilsReactNative.ConstantsUtil.VERSION}`,
      ...w3mOptions
    });
    this.options = options;
    this.metadata = config.metadata;
    this.projectId = w3mOptions.projectId;
    this.chains = chains;
    this.createProvider();
    _scaffoldUtilsReactNative.EthersStoreUtil.subscribeKey('address', () => {
      this.syncAccount();
    });
    _scaffoldUtilsReactNative.EthersStoreUtil.subscribeKey('chainId', () => {
      this.syncNetwork(chainImages);
    });
    this.syncRequestedNetworks(chains, chainImages);
    this.syncConnectors(config);
    if (config.coinbase) {
      this.checkActiveCoinbaseProvider(config);
    }
  }

  // -- Public ------------------------------------------------------------------

  // @ts-expect-error: Overriden state type is correct
  getState() {
    const state = super.getState();
    return {
      ...state,
      selectedNetworkId: _scaffoldUtilsReactNative.HelpersUtil.caipNetworkIdToNumber(state.selectedNetworkId)
    };
  }

  // @ts-expect-error: Overriden state type is correct
  subscribeState(callback) {
    return super.subscribeState(state => callback({
      ...state,
      selectedNetworkId: _scaffoldUtilsReactNative.HelpersUtil.caipNetworkIdToNumber(state.selectedNetworkId)
    }));
  }
  setAddress(address) {
    const originalAddress = address ? (0, _ethers.getAddress)(address) : undefined;
    _scaffoldUtilsReactNative.EthersStoreUtil.setAddress(originalAddress);
  }
  getAddress() {
    const {
      address
    } = _scaffoldUtilsReactNative.EthersStoreUtil.state;
    return address ? (0, _ethers.getAddress)(address) : address;
  }
  getError() {
    return _scaffoldUtilsReactNative.EthersStoreUtil.state.error;
  }
  getChainId() {
    return _scaffoldUtilsReactNative.EthersStoreUtil.state.chainId;
  }
  getIsConnected() {
    return _scaffoldUtilsReactNative.EthersStoreUtil.state.isConnected;
  }
  getWalletProvider() {
    return _scaffoldUtilsReactNative.EthersStoreUtil.state.provider;
  }
  getWalletProviderType() {
    return _scaffoldUtilsReactNative.EthersStoreUtil.state.providerType;
  }
  subscribeProvider(callback) {
    return _scaffoldUtilsReactNative.EthersStoreUtil.subscribe(callback);
  }
  async disconnect() {
    const {
      provider
    } = _scaffoldUtilsReactNative.EthersStoreUtil.state;
    _scaffoldUtilsReactNative.StorageUtil.removeItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
    _scaffoldUtilsReactNative.EthersStoreUtil.reset();
    await provider.disconnect();
  }

  // -- Private -----------------------------------------------------------------
  createProvider() {
    if (!this.walletConnectProviderInitPromise) {
      this.walletConnectProviderInitPromise = this.initWalletConnectProvider();
    }
    return this.walletConnectProviderInitPromise;
  }
  async initWalletConnectProvider() {
    const walletConnectProviderOptions = {
      projectId: this.projectId,
      showQrModal: false,
      rpcMap: this.chains ? this.chains.reduce((map, chain) => {
        map[chain.chainId] = chain.rpcUrl;
        return map;
      }, {}) : {},
      optionalChains: [...this.chains.map(chain => chain.chainId)],
      metadata: this.metadata
    };
    this.walletConnectProvider = await _ethereumProvider.default.init(walletConnectProviderOptions);
    await this.checkActiveWalletConnectProvider();
  }
  async getWalletConnectProvider() {
    if (!this.walletConnectProvider) {
      try {
        await this.createProvider();
      } catch (error) {
        _scaffoldUtilsReactNative.EthersStoreUtil.setError(error);
      }
    }
    return this.walletConnectProvider;
  }
  syncRequestedNetworks(chains, chainImages) {
    const requestedCaipNetworks = chains?.map(chain => ({
      id: `${_scaffoldUtilsReactNative.ConstantsUtil.EIP155}:${chain.chainId}`,
      name: chain.name,
      imageId: _scaffoldUtilsReactNative.PresetsUtil.EIP155NetworkImageIds[chain.chainId],
      imageUrl: chainImages?.[chain.chainId]
    }));
    this.setRequestedCaipNetworks(requestedCaipNetworks ?? []);
  }
  async checkActiveWalletConnectProvider() {
    const WalletConnectProvider = await this.getWalletConnectProvider();
    const walletId = await _scaffoldUtilsReactNative.StorageUtil.getItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
    if (WalletConnectProvider) {
      if (walletId === _scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID) {
        await this.setWalletConnectProvider();
      }
    }
  }
  async checkActiveCoinbaseProvider(config) {
    const CoinbaseProvider = config.coinbase;
    const walletId = await _scaffoldUtilsReactNative.StorageUtil.getItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
    if (CoinbaseProvider) {
      if (walletId === _scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID) {
        if (CoinbaseProvider.address) {
          await this.setCoinbaseProvider(config);
          await this.watchCoinbase(config);
        } else {
          await _scaffoldUtilsReactNative.StorageUtil.removeItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
          _scaffoldUtilsReactNative.EthersStoreUtil.reset();
        }
      }
    }
  }
  async setWalletConnectProvider() {
    _scaffoldUtilsReactNative.StorageUtil.setItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID, _scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID);
    const WalletConnectProvider = await this.getWalletConnectProvider();
    if (WalletConnectProvider) {
      const providerType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID];
      _scaffoldUtilsReactNative.EthersStoreUtil.setChainId(WalletConnectProvider.chainId);
      _scaffoldUtilsReactNative.EthersStoreUtil.setProviderType(providerType);
      _scaffoldUtilsReactNative.EthersStoreUtil.setProvider(WalletConnectProvider);
      _scaffoldUtilsReactNative.EthersStoreUtil.setIsConnected(true);
      this.setAddress(WalletConnectProvider.accounts?.[0]);
      await this.watchWalletConnect();
    }
  }
  async setCoinbaseProvider(config) {
    await _scaffoldUtilsReactNative.StorageUtil.setItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID, _scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID);
    const CoinbaseProvider = config.coinbase;
    if (CoinbaseProvider) {
      const {
        address,
        chainId
      } = await _scaffoldUtilsReactNative.EthersHelpersUtil.getUserInfo(CoinbaseProvider);
      if (address && chainId) {
        const providerType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID];
        _scaffoldUtilsReactNative.EthersStoreUtil.setChainId(chainId);
        _scaffoldUtilsReactNative.EthersStoreUtil.setProviderType(providerType);
        _scaffoldUtilsReactNative.EthersStoreUtil.setProvider(config.coinbase);
        _scaffoldUtilsReactNative.EthersStoreUtil.setIsConnected(true);
        this.setAddress(address);
        await this.watchCoinbase(config);
      }
    }
  }
  async watchWalletConnect() {
    const WalletConnectProvider = await this.getWalletConnectProvider();
    function disconnectHandler() {
      _scaffoldUtilsReactNative.StorageUtil.removeItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
      _scaffoldUtilsReactNative.EthersStoreUtil.reset();
      WalletConnectProvider?.removeListener('disconnect', disconnectHandler);
      WalletConnectProvider?.removeListener('accountsChanged', accountsChangedHandler);
      WalletConnectProvider?.removeListener('chainChanged', chainChangedHandler);
    }
    function chainChangedHandler(chainId) {
      if (chainId) {
        const chain = _scaffoldUtilsReactNative.EthersHelpersUtil.hexStringToNumber(chainId);
        _scaffoldUtilsReactNative.EthersStoreUtil.setChainId(chain);
      }
    }
    const accountsChangedHandler = async accounts => {
      if (accounts.length > 0) {
        await this.setWalletConnectProvider();
      }
    };
    if (WalletConnectProvider) {
      WalletConnectProvider.on('disconnect', disconnectHandler);
      WalletConnectProvider.on('accountsChanged', accountsChangedHandler);
      WalletConnectProvider.on('chainChanged', chainChangedHandler);
    }
  }
  async watchCoinbase(config) {
    const CoinbaseProvider = config.coinbase;
    const walletId = await _scaffoldUtilsReactNative.StorageUtil.getItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
    function disconnectHandler() {
      _scaffoldUtilsReactNative.StorageUtil.removeItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
      _scaffoldUtilsReactNative.EthersStoreUtil.reset();
      CoinbaseProvider?.removeListener('disconnect', disconnectHandler);
      CoinbaseProvider?.removeListener('accountsChanged', accountsChangedHandler);
      CoinbaseProvider?.removeListener('chainChanged', chainChangedHandler);
    }
    function accountsChangedHandler(accounts) {
      if (accounts.length === 0) {
        _scaffoldUtilsReactNative.StorageUtil.removeItem(_scaffoldUtilsReactNative.EthersConstantsUtil.WALLET_ID);
        _scaffoldUtilsReactNative.EthersStoreUtil.reset();
      } else {
        _scaffoldUtilsReactNative.EthersStoreUtil.setAddress(accounts[0]);
      }
    }
    function chainChangedHandler(chainId) {
      if (chainId && walletId === _scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID) {
        const chain = Number(chainId);
        _scaffoldUtilsReactNative.EthersStoreUtil.setChainId(chain);
      }
    }
    if (CoinbaseProvider) {
      CoinbaseProvider.on('disconnect', disconnectHandler);
      CoinbaseProvider.on('accountsChanged', accountsChangedHandler);
      CoinbaseProvider.on('chainChanged', chainChangedHandler);
    }
  }
  async syncAccount() {
    const address = _scaffoldUtilsReactNative.EthersStoreUtil.state.address;
    const chainId = _scaffoldUtilsReactNative.EthersStoreUtil.state.chainId;
    const isConnected = _scaffoldUtilsReactNative.EthersStoreUtil.state.isConnected;
    this.resetAccount();
    if (isConnected && address && chainId) {
      const caipAddress = `${_scaffoldUtilsReactNative.ConstantsUtil.EIP155}:${chainId}:${address}`;
      this.setIsConnected(isConnected);
      this.setCaipAddress(caipAddress);
      await Promise.all([this.syncProfile(address), this.syncBalance(address), this.getApprovedCaipNetworksData()]);
      this.hasSyncedConnectedAccount = true;
    } else if (!isConnected && this.hasSyncedConnectedAccount) {
      this.resetWcConnection();
      this.resetNetwork();
    }
  }
  async syncNetwork(chainImages) {
    const address = _scaffoldUtilsReactNative.EthersStoreUtil.state.address;
    const chainId = _scaffoldUtilsReactNative.EthersStoreUtil.state.chainId;
    const isConnected = _scaffoldUtilsReactNative.EthersStoreUtil.state.isConnected;
    if (this.chains) {
      const chain = this.chains.find(c => c.chainId === chainId);
      if (chain) {
        const caipChainId = `${_scaffoldUtilsReactNative.ConstantsUtil.EIP155}:${chain.chainId}`;
        this.setCaipNetwork({
          id: caipChainId,
          name: chain.name,
          imageId: _scaffoldUtilsReactNative.PresetsUtil.EIP155NetworkImageIds[chain.chainId],
          imageUrl: chainImages?.[chain.chainId]
        });
        if (isConnected && address) {
          const caipAddress = `${_scaffoldUtilsReactNative.ConstantsUtil.EIP155}:${chainId}:${address}`;
          this.setCaipAddress(caipAddress);
          if (chain.explorerUrl) {
            const url = `${chain.explorerUrl}/address/${address}`;
            this.setAddressExplorerUrl(url);
          } else {
            this.setAddressExplorerUrl(undefined);
          }
          if (this.hasSyncedConnectedAccount) {
            await this.syncBalance(address);
          }
        }
      }
    }
  }
  async syncProfile(address) {
    const chainId = _scaffoldUtilsReactNative.EthersStoreUtil.state.chainId;
    if (chainId === 1) {
      const ensProvider = new _ethers.InfuraProvider('mainnet');
      const name = await ensProvider.lookupAddress(address);
      const avatar = await ensProvider.getAvatar(address);
      if (name) {
        this.setProfileName(name);
      }
      if (avatar) {
        this.setProfileImage(avatar);
      }
    } else {
      this.setProfileName(undefined);
      this.setProfileImage(undefined);
    }
  }
  async syncBalance(address) {
    const chainId = _scaffoldUtilsReactNative.EthersStoreUtil.state.chainId;
    if (chainId && this.chains) {
      const chain = this.chains.find(c => c.chainId === chainId);
      if (chain) {
        const jsonRpcProvider = new _ethers.JsonRpcProvider(chain.rpcUrl, {
          chainId,
          name: chain.name
        });
        if (jsonRpcProvider) {
          const balance = await jsonRpcProvider.getBalance(address);
          const formattedBalance = (0, _ethers.formatEther)(balance);
          this.setBalance(formattedBalance, chain.currency);
        }
      }
    }
  }
  async switchNetwork(chainId) {
    const provider = _scaffoldUtilsReactNative.EthersStoreUtil.state.provider;
    const providerType = _scaffoldUtilsReactNative.EthersStoreUtil.state.providerType;
    if (this.chains) {
      const chain = this.chains.find(c => c.chainId === chainId);
      const walletConnectType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID];
      const coinbaseType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID];
      if (providerType === walletConnectType && chain) {
        const WalletConnectProvider = provider;
        if (WalletConnectProvider) {
          try {
            const ns = WalletConnectProvider.signer?.session?.namespaces;
            const nsMethods = ns?.[_scaffoldUtilsReactNative.ConstantsUtil.EIP155]?.methods;
            const nsChains = this.getChainsIds(ns?.[_scaffoldUtilsReactNative.ConstantsUtil.EIP155]?.chains);
            const isChainApproved = nsChains.includes(chainId);
            if (!isChainApproved && nsMethods?.includes('wallet_addEthereumChain')) {
              await _scaffoldUtilsReactNative.EthersHelpersUtil.addEthereumChain(WalletConnectProvider, chain);
            }
            await WalletConnectProvider.request({
              method: 'wallet_switchEthereumChain',
              params: [{
                chainId: _scaffoldUtilsReactNative.EthersHelpersUtil.numberToHexString(chain.chainId)
              }]
            });
            _scaffoldUtilsReactNative.EthersStoreUtil.setChainId(chainId);
          } catch (switchError) {
            throw new Error('Chain is not supported');
          }
        }
      } else if (providerType === coinbaseType && chain) {
        const CoinbaseProvider = provider;
        if (CoinbaseProvider) {
          try {
            await CoinbaseProvider.request({
              method: 'wallet_switchEthereumChain',
              params: [{
                chainId: _scaffoldUtilsReactNative.EthersHelpersUtil.numberToHexString(chain.chainId)
              }]
            });
            _scaffoldUtilsReactNative.EthersStoreUtil.setChainId(chain.chainId);
          } catch (switchError) {
            if (switchError.code === _scaffoldUtilsReactNative.EthersConstantsUtil.ERROR_CODE_UNRECOGNIZED_CHAIN_ID || switchError.code === _scaffoldUtilsReactNative.EthersConstantsUtil.ERROR_CODE_DEFAULT || switchError?.data?.originalError?.code === _scaffoldUtilsReactNative.EthersConstantsUtil.ERROR_CODE_UNRECOGNIZED_CHAIN_ID) {
              await _scaffoldUtilsReactNative.EthersHelpersUtil.addEthereumChain(CoinbaseProvider, chain);
            }
          }
        }
      }
    }
  }
  syncConnectors(config) {
    const w3mConnectors = [];
    const connectorType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID];
    if (connectorType) {
      w3mConnectors.push({
        id: _scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID,
        explorerId: _scaffoldUtilsReactNative.PresetsUtil.ConnectorExplorerIds[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID],
        imageId: _scaffoldUtilsReactNative.PresetsUtil.ConnectorImageIds[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID],
        imageUrl: this.options?.connectorImages?.[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID],
        name: _scaffoldUtilsReactNative.PresetsUtil.ConnectorNamesMap[_scaffoldUtilsReactNative.ConstantsUtil.WALLET_CONNECT_CONNECTOR_ID],
        type: connectorType
      });
    }
    const coinbaseType = _scaffoldUtilsReactNative.PresetsUtil.ConnectorTypesMap[_scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID];
    if (config.coinbase && coinbaseType) {
      w3mConnectors.push({
        id: _scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID,
        explorerId: _scaffoldUtilsReactNative.PresetsUtil.ConnectorExplorerIds[_scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID],
        imageId: _scaffoldUtilsReactNative.PresetsUtil.ConnectorImageIds[_scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID],
        imageUrl: this.options?.connectorImages?.[_scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID],
        name: _scaffoldUtilsReactNative.PresetsUtil.ConnectorNamesMap[_scaffoldUtilsReactNative.ConstantsUtil.COINBASE_CONNECTOR_ID],
        type: coinbaseType
      });
    }
    this.setConnectors(w3mConnectors);
  }
  getChainsIds(chains) {
    if (!chains) return [];
    const chainIds = chains?.map(chain => parseInt(chain.split(':')[1] || ''));
    return chainIds ?? [];
  }
}
exports.Web3Modal = Web3Modal;
//# sourceMappingURL=client.js.map