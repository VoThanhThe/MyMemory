import type { Chain, Config, Connector as WagmiConnector } from '@wagmi/core';
import type { LibraryOptions, PublicStateControllerState, Token } from '@web3modal/scaffold-react-native';
import { Web3ModalScaffold } from '@web3modal/scaffold-react-native';
interface WagmiConfig extends Config<any, any> {
    connectors: WagmiConnector<any, any>[];
}
export interface Web3ModalClientOptions extends Omit<LibraryOptions, 'defaultChain' | 'tokens'> {
    wagmiConfig: WagmiConfig;
    chains?: Chain[];
    defaultChain?: Chain;
    chainImages?: Record<number, string>;
    connectorImages?: Record<string, string>;
    tokens?: Record<number, Token>;
}
export type Web3ModalOptions = Omit<Web3ModalClientOptions, '_sdkVersion'>;
interface Web3ModalState extends PublicStateControllerState {
    selectedNetworkId: number | undefined;
}
export declare class Web3Modal extends Web3ModalScaffold {
    private hasSyncedConnectedAccount;
    private options;
    constructor(options: Web3ModalClientOptions);
    getState(): {
        selectedNetworkId: number | undefined;
        open: boolean;
    };
    subscribeState(callback: (state: Web3ModalState) => void): () => void;
    private syncRequestedNetworks;
    private syncAccount;
    private syncNetwork;
    private syncProfile;
    private syncBalance;
    private syncConnectors;
}
export {};
//# sourceMappingURL=client.d.ts.map