interface Options {
    baseUrl: string;
}
interface RequestArguments {
    path: string;
    headers?: HeadersInit_;
    params?: Record<string, string | undefined>;
}
interface PostArguments extends RequestArguments {
    body?: Record<string, unknown>;
}
export declare class FetchUtil {
    baseUrl: Options['baseUrl'];
    constructor({ baseUrl }: Options);
    get<T>({ headers, ...args }: RequestArguments): Promise<T | undefined>;
    post<T>({ body, headers, ...args }: PostArguments): Promise<T | undefined>;
    put<T>({ body, headers, ...args }: PostArguments): Promise<T | undefined>;
    delete<T>({ body, headers, ...args }: PostArguments): Promise<T | undefined>;
    fetchImage(path: string, headers?: Record<string, string>): Promise<string | undefined>;
    private createUrl;
    private processResponse;
}
export {};
//# sourceMappingURL=FetchUtil.d.ts.map