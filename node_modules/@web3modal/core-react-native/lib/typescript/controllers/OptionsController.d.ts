import type { CustomWallet, ProjectId, SdkVersion, Tokens } from '../utils/TypeUtil';
export interface ClipboardClient {
    setString: (value: string) => Promise<void>;
}
export interface OptionsControllerState {
    projectId: ProjectId;
    _clipboardClient?: ClipboardClient;
    includeWalletIds?: string[];
    excludeWalletIds?: string[];
    featuredWalletIds?: string[];
    customWallets?: CustomWallet[];
    tokens?: Tokens;
    enableAnalytics?: boolean;
    sdkType: string;
    sdkVersion: SdkVersion;
}
export declare const OptionsController: {
    state: OptionsControllerState;
    setClipboardClient(client: ClipboardClient): void;
    setProjectId(projectId: OptionsControllerState['projectId']): void;
    setIncludeWalletIds(includeWalletIds: OptionsControllerState['includeWalletIds']): void;
    setExcludeWalletIds(excludeWalletIds: OptionsControllerState['excludeWalletIds']): void;
    setFeaturedWalletIds(featuredWalletIds: OptionsControllerState['featuredWalletIds']): void;
    setTokens(tokens: OptionsControllerState['tokens']): void;
    setCustomWallets(customWallets: OptionsControllerState['customWallets']): void;
    setEnableAnalytics(enableAnalytics: OptionsControllerState['enableAnalytics']): void;
    setSdkVersion(sdkVersion: OptionsControllerState['sdkVersion']): void;
    isClipboardAvailable(): boolean;
    copyToClipboard(value: string): void;
};
//# sourceMappingURL=OptionsController.d.ts.map