"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageUtil = void 0;
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint-disable no-console */

// -- Helpers -----------------------------------------------------------------
const WC_DEEPLINK = 'WALLETCONNECT_DEEPLINK_CHOICE';
const W3M_RECENT = '@w3m/recent';
const W3M_CONNECTED_CONNECTOR = '@w3m/connected_connector';

// -- Utility -----------------------------------------------------------------
const StorageUtil = exports.StorageUtil = {
  setWalletConnectDeepLink({
    href,
    name
  }) {
    try {
      _asyncStorage.default.setItem(WC_DEEPLINK, JSON.stringify({
        href,
        name
      }));
    } catch {
      console.info('Unable to set WalletConnect deep link');
    }
  },
  async getWalletConnectDeepLink() {
    try {
      const deepLink = await _asyncStorage.default.getItem(WC_DEEPLINK);
      if (deepLink) {
        return JSON.parse(deepLink);
      }
    } catch {
      console.info('Unable to get WalletConnect deep link');
    }
    return undefined;
  },
  async removeWalletConnectDeepLink() {
    try {
      await _asyncStorage.default.removeItem(WC_DEEPLINK);
    } catch {
      console.info('Unable to delete WalletConnect deep link');
    }
  },
  async setWeb3ModalRecent(wallet) {
    try {
      const recentWallets = await StorageUtil.getRecentWallets();
      const recentIndex = recentWallets.findIndex(w => w.id === wallet.id);
      if (recentIndex > -1) {
        recentWallets.splice(recentIndex, 1);
      }
      recentWallets.unshift(wallet);
      if (recentWallets.length > 2) {
        recentWallets.pop();
      }
      _asyncStorage.default.setItem(W3M_RECENT, JSON.stringify(recentWallets));
      return recentWallets;
    } catch {
      console.info('Unable to set Web3Modal recent');
      return undefined;
    }
  },
  async getRecentWallets() {
    try {
      const recent = await _asyncStorage.default.getItem(W3M_RECENT);
      return recent ? JSON.parse(recent) : [];
    } catch {
      console.info('Unable to get Web3Modal recent');
    }
    return [];
  },
  async setConnectedConnector(connectorType) {
    try {
      await _asyncStorage.default.setItem(W3M_CONNECTED_CONNECTOR, JSON.stringify(connectorType));
    } catch {
      console.info('Unable to set Connected Connector');
    }
  },
  async getConnectedConnector() {
    try {
      const connector = await _asyncStorage.default.getItem(W3M_CONNECTED_CONNECTOR);
      return connector ? JSON.parse(connector) : undefined;
    } catch {
      console.info('Unable to get Connected Connector');
    }
    return undefined;
  },
  async removeConnectedConnector() {
    try {
      await _asyncStorage.default.removeItem(W3M_CONNECTED_CONNECTOR);
    } catch {
      console.info('Unable to remove Connected Connector');
    }
  }
};
//# sourceMappingURL=StorageUtil.js.map