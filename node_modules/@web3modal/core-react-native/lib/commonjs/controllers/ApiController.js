"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiController = void 0;
var _reactNative = require("react-native");
var _utils = require("valtio/utils");
var _valtio = require("valtio");
var _CoreHelperUtil = require("../utils/CoreHelperUtil");
var _FetchUtil = require("../utils/FetchUtil");
var _StorageUtil = require("../utils/StorageUtil");
var _AssetController = require("./AssetController");
var _NetworkController = require("./NetworkController");
var _OptionsController = require("./OptionsController");
var _ConnectorController = require("./ConnectorController");
// -- Helpers ------------------------------------------- //
const baseUrl = _CoreHelperUtil.CoreHelperUtil.getApiUrl();
const api = new _FetchUtil.FetchUtil({
  baseUrl
});
const defaultEntries = '48';
const recommendedEntries = '4';

// -- Types --------------------------------------------- //

// -- State --------------------------------------------- //
const state = (0, _valtio.proxy)({
  page: 1,
  count: 0,
  featured: [],
  recommended: [],
  wallets: [],
  search: [],
  installed: []
});

// -- Controller ---------------------------------------- //
const ApiController = exports.ApiController = {
  state,
  platform() {
    return _reactNative.Platform.select({
      default: 'ios',
      android: 'android'
    });
  },
  subscribeKey(key, callback) {
    return (0, _utils.subscribeKey)(state, key, callback);
  },
  _getApiHeaders() {
    const {
      projectId,
      sdkType,
      sdkVersion
    } = _OptionsController.OptionsController.state;
    return {
      'x-project-id': projectId,
      'x-sdk-type': sdkType,
      'x-sdk-version': sdkVersion,
      'User-Agent': `${_reactNative.Platform.OS}-${_reactNative.Platform.Version}`
    };
  },
  async _fetchWalletImage(imageId) {
    const headers = ApiController._getApiHeaders();
    const url = await api.fetchImage(`/getWalletImage/${imageId}`, headers);
    if (url) {
      _AssetController.AssetController.setWalletImage(imageId, url);
    }
  },
  async _fetchConnectorImage(imageId) {
    const headers = ApiController._getApiHeaders();
    const url = await api.fetchImage(`/public/getAssetImage/${imageId}`, headers);
    if (url) {
      _AssetController.AssetController.setConnectorImage(imageId, url);
    }
  },
  async _fetchNetworkImage(imageId) {
    const headers = ApiController._getApiHeaders();
    const url = await api.fetchImage(`/public/getAssetImage/${imageId}`, headers);
    if (url) {
      _AssetController.AssetController.setNetworkImage(imageId, url);
    }
  },
  async fetchConnectorImages() {
    const {
      connectors
    } = _ConnectorController.ConnectorController.state;
    const ids = connectors.map(({
      imageId
    }) => imageId).filter(Boolean);
    await Promise.allSettled(ids.map(id => ApiController._fetchConnectorImage(id)));
  },
  async fetchNetworkImages() {
    const {
      requestedCaipNetworks
    } = _NetworkController.NetworkController.state;
    const ids = requestedCaipNetworks?.map(({
      imageId
    }) => imageId).filter(Boolean);
    if (ids) {
      await Promise.allSettled(ids.map(id => ApiController._fetchNetworkImage(id)));
    }
  },
  async fetchInstalledWallets() {
    const {
      includeWalletIds
    } = _OptionsController.OptionsController.state;
    const path = _reactNative.Platform.select({
      default: 'getIosData',
      android: 'getAndroidData'
    });
    const response = await api.get({
      path,
      headers: ApiController._getApiHeaders()
    });
    if (!response) return;
    let {
      data: walletData
    } = response;
    if (includeWalletIds?.length) {
      walletData = walletData.filter(({
        id
      }) => includeWalletIds.includes(id));
    }
    const promises = walletData.map(async item => {
      return {
        id: item.id,
        isInstalled: await _CoreHelperUtil.CoreHelperUtil.checkInstalled(item)
      };
    });
    const results = await Promise.all(promises);
    const installed = results.filter(({
      isInstalled
    }) => isInstalled).map(({
      id
    }) => id);
    const {
      excludeWalletIds
    } = _OptionsController.OptionsController.state;
    if (installed.length > 0) {
      const walletResponse = await api.get({
        path: '/getWallets',
        headers: ApiController._getApiHeaders(),
        params: {
          page: '1',
          platform: this.platform(),
          entries: installed?.length.toString(),
          include: installed?.join(','),
          exclude: excludeWalletIds?.join(',')
        }
      });
      if (walletResponse?.data) {
        const walletImages = walletResponse.data.map(d => d.image_id).filter(Boolean);
        await Promise.allSettled(walletImages.map(id => ApiController._fetchWalletImage(id)));
        state.installed = walletResponse.data;
      }
    }
  },
  async fetchFeaturedWallets() {
    const {
      featuredWalletIds
    } = _OptionsController.OptionsController.state;
    const exclude = state.installed.map(({
      id
    }) => id);
    if (featuredWalletIds?.length) {
      const response = await api.get({
        path: '/getWallets',
        headers: ApiController._getApiHeaders(),
        params: {
          page: '1',
          platform: this.platform(),
          entries: featuredWalletIds?.length ? String(featuredWalletIds.length) : recommendedEntries,
          include: featuredWalletIds?.join(','),
          exclude: exclude?.join(',')
        }
      });
      if (!response) return;
      const {
        data
      } = response;
      data.sort((a, b) => featuredWalletIds.indexOf(a.id) - featuredWalletIds.indexOf(b.id));
      const images = data.map(d => d.image_id).filter(Boolean);
      await Promise.allSettled(images.map(id => ApiController._fetchWalletImage(id)));
      state.featured = data;
    }
  },
  async fetchRecommendedWallets() {
    const {
      installed
    } = ApiController.state;
    const {
      includeWalletIds,
      excludeWalletIds,
      featuredWalletIds
    } = _OptionsController.OptionsController.state;
    const exclude = [...installed.map(({
      id
    }) => id), ...(excludeWalletIds ?? []), ...(featuredWalletIds ?? [])].filter(Boolean);
    const response = await api.get({
      path: '/getWallets',
      headers: ApiController._getApiHeaders(),
      params: {
        page: '1',
        platform: this.platform(),
        entries: recommendedEntries,
        include: includeWalletIds?.join(','),
        exclude: exclude?.join(',')
      }
    });
    if (!response) return;
    const {
      data,
      count
    } = response;
    const recent = await _StorageUtil.StorageUtil.getRecentWallets();
    const recommendedImages = data.map(d => d.image_id).filter(Boolean);
    const recentImages = recent.map(r => r.image_id).filter(Boolean);
    await Promise.allSettled([...recommendedImages, ...recentImages].map(id => ApiController._fetchWalletImage(id)));
    state.recommended = data;
    state.count = count ?? 0;
  },
  async fetchWallets({
    page
  }) {
    const {
      includeWalletIds,
      excludeWalletIds,
      featuredWalletIds
    } = _OptionsController.OptionsController.state;
    const exclude = [...state.installed.map(({
      id
    }) => id), ...state.recommended.map(({
      id
    }) => id), ...(excludeWalletIds ?? []), ...(featuredWalletIds ?? [])].filter(Boolean);
    const response = await api.get({
      path: '/getWallets',
      headers: ApiController._getApiHeaders(),
      params: {
        page: String(page),
        platform: this.platform(),
        entries: String(defaultEntries),
        include: includeWalletIds?.join(','),
        exclude: exclude.join(',')
      }
    });
    if (!response) return;
    const {
      data,
      count
    } = response;
    const images = data.map(w => w.image_id).filter(Boolean);
    await Promise.allSettled([...images.map(id => ApiController._fetchWalletImage(id)), _CoreHelperUtil.CoreHelperUtil.wait(300)]);
    state.wallets = [...state.wallets, ...data];
    state.count = count > state.count ? count : state.count;
    state.page = page;
  },
  async searchWallet({
    search
  }) {
    const {
      includeWalletIds,
      excludeWalletIds
    } = _OptionsController.OptionsController.state;
    state.search = [];
    const response = await api.get({
      path: '/getWallets',
      headers: ApiController._getApiHeaders(),
      params: {
        page: '1',
        platform: this.platform(),
        entries: String(defaultEntries),
        search,
        include: includeWalletIds?.join(','),
        exclude: excludeWalletIds?.join(',')
      }
    });
    if (!response) return;
    const {
      data
    } = response;
    const images = data.map(w => w.image_id).filter(Boolean);
    await Promise.allSettled([...images.map(id => ApiController._fetchWalletImage(id)), _CoreHelperUtil.CoreHelperUtil.wait(300)]);
    state.search = data;
  },
  async prefetch() {
    // this fetch must resolve first so we filter them in the other wallet requests
    await ApiController.fetchInstalledWallets();
    const promises = [ApiController.fetchFeaturedWallets(), ApiController.fetchRecommendedWallets(), ApiController.fetchNetworkImages(), ApiController.fetchConnectorImages()];
    if (_OptionsController.OptionsController.state.enableAnalytics === undefined) {
      promises.push(ApiController.fetchAnalyticsConfig());
    }
    state.prefetchPromise = Promise.race([Promise.allSettled(promises), _CoreHelperUtil.CoreHelperUtil.wait(3000)]);
  },
  async fetchAnalyticsConfig() {
    const response = await api.get({
      path: '/getAnalyticsConfig',
      headers: ApiController._getApiHeaders()
    });
    if (!response) return;
    _OptionsController.OptionsController.setEnableAnalytics(response.isAnalyticsEnabled);
  }
};
//# sourceMappingURL=ApiController.js.map