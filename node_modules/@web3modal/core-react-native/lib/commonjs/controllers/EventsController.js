"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventsController = void 0;
var _reactNative = require("react-native");
var _vanilla = require("valtio/vanilla");
var _ApiController = require("./ApiController");
var _OptionsController = require("./OptionsController");
var _CoreHelperUtil = require("../utils/CoreHelperUtil");
var _FetchUtil = require("../utils/FetchUtil");
// -- Helpers ------------------------------------------- //
const baseUrl = _CoreHelperUtil.CoreHelperUtil.getAnalyticsUrl();
const api = new _FetchUtil.FetchUtil({
  baseUrl
});
const excluded = ['MODAL_CREATED'];

// -- Types --------------------------------------------- //

// -- State --------------------------------------------- //
const state = (0, _vanilla.proxy)({
  timestamp: Date.now(),
  data: {
    type: 'track',
    event: 'MODAL_CREATED' // just for init purposes
  }
});

// -- Controller ---------------------------------------- //
const EventsController = exports.EventsController = {
  state,
  subscribe(callback) {
    return (0, _vanilla.subscribe)(state, () => callback(state));
  },
  _getApiHeaders() {
    const {
      projectId,
      sdkType,
      sdkVersion
    } = _OptionsController.OptionsController.state;
    return {
      'x-project-id': projectId,
      'x-sdk-type': sdkType,
      'x-sdk-version': sdkVersion,
      'User-Agent': `${_reactNative.Platform.OS}-${_reactNative.Platform.Version}`
    };
  },
  async _sendAnalyticsEvent(data, timestamp) {
    if (excluded.includes(data.event)) {
      return;
    }
    try {
      await api.post({
        path: '/e',
        headers: this._getApiHeaders(),
        body: {
          eventId: _CoreHelperUtil.CoreHelperUtil.getUUID(),
          bundleId: _CoreHelperUtil.CoreHelperUtil.getBundleId(),
          timestamp,
          props: data
        }
      });
    } catch {
      // Catch silently
    }
  },
  async sendEvent(data) {
    const timestamp = Date.now();
    state.timestamp = timestamp;
    state.data = data;
    await _ApiController.ApiController.state.prefetchPromise;
    if (_OptionsController.OptionsController.state.enableAnalytics) {
      EventsController._sendAnalyticsEvent(data, timestamp);
    }
  }
};
//# sourceMappingURL=EventsController.js.map