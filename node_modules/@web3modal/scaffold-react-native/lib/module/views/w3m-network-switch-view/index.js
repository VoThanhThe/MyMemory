import { useSnapshot } from 'valtio';
import { useEffect, useState } from 'react';
import { ApiController, AssetUtil, ConnectionController, EventsController, NetworkController, RouterController } from '@web3modal/core-react-native';
import { Button, FlexView, IconBox, LoadingHexagon, NetworkImage, Text } from '@web3modal/ui-react-native';
import styles from './styles';
export function NetworkSwitchView() {
  const {
    data
  } = useSnapshot(RouterController.state);
  const {
    recentWallets
  } = useSnapshot(ConnectionController.state);
  const {
    caipNetwork
  } = useSnapshot(NetworkController.state);
  const [error, setError] = useState(false);
  const [showRetry, setShowRetry] = useState(false);
  const network = data?.network;
  const wallet = recentWallets?.[0];
  const onSwitchNetwork = async () => {
    try {
      setError(false);
      await NetworkController.switchActiveNetwork(network);
      EventsController.sendEvent({
        type: 'track',
        event: 'SWITCH_NETWORK',
        properties: {
          network: network.id
        }
      });
    } catch {
      setError(true);
      setShowRetry(true);
    }
  };
  useEffect(() => {
    onSwitchNetwork();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useEffect(() => {
    // Go back if network is already switched
    if (caipNetwork?.id === network?.id) {
      RouterController.goBack();
    }
  }, [caipNetwork?.id, network?.id]);
  const retryTemplate = () => {
    if (!showRetry) return null;
    return /*#__PURE__*/React.createElement(Button, {
      variant: "accent",
      iconLeft: "refresh",
      style: styles.retryButton,
      iconStyle: styles.retryIcon,
      onPress: onSwitchNetwork
    }, "Try again");
  };
  const textTemplate = () => {
    const walletName = wallet?.name ?? 'wallet';
    if (error) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {
        variant: "paragraph-500",
        style: styles.text
      }, "Switch declined"), /*#__PURE__*/React.createElement(Text, {
        center: true,
        variant: "small-400",
        color: "fg-200",
        style: styles.descriptionText
      }, "Switch can be declined if chain is not supported by a wallet or previous request is still active"));
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {
      variant: "paragraph-500",
      style: styles.text
    }, `Approve in ${walletName}`), /*#__PURE__*/React.createElement(Text, {
      center: true,
      variant: "small-400",
      color: "fg-200",
      style: styles.descriptionText
    }, "Accept switch request in your wallet"));
  };
  return /*#__PURE__*/React.createElement(FlexView, {
    alignItems: "center",
    padding: ['2xl', 's', '4xl', 's']
  }, /*#__PURE__*/React.createElement(LoadingHexagon, {
    paused: error
  }, /*#__PURE__*/React.createElement(NetworkImage, {
    imageSrc: AssetUtil.getNetworkImage(network),
    imageHeaders: ApiController._getApiHeaders(),
    size: "lg"
  }), error && /*#__PURE__*/React.createElement(IconBox, {
    icon: "close",
    border: true,
    background: true,
    backgroundColor: "icon-box-bg-error-100",
    size: "sm",
    iconColor: "error-100",
    style: styles.errorIcon
  })), textTemplate(), retryTemplate());
}
//# sourceMappingURL=index.js.map