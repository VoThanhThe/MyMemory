import { useSnapshot } from 'valtio';
import { useCallback, useEffect, useState } from 'react';
import { ScrollView } from 'react-native';
import { RouterController, ApiController, AssetUtil, ConnectionController, ModalController, EventsController } from '@web3modal/core-react-native';
import { Button, FlexView, LoadingThumbnail, Text, WalletImage } from '@web3modal/ui-react-native';
import { useCustomDimensions } from '../../hooks/useCustomDimensions';
import styles from './styles';
import { StorageUtil } from '@web3modal/core-react-native';
export function ConnectingExternalView() {
  const {
    data
  } = useSnapshot(RouterController.state);
  const connector = data?.connector;
  const {
    maxWidth: width
  } = useCustomDimensions();
  const [connectionError, setConnectionError] = useState(false);
  const [installedError, setInstalledError] = useState(false);
  const [isRetrying, setIsRetrying] = useState(false);
  const [ready, setReady] = useState(false);
  const onRetryPress = () => {
    setIsRetrying(true);
  };
  const storeDeeplink = useCallback(async () => {
    if (data?.wallet) {
      const recentWallets = await StorageUtil.setWeb3ModalRecent(data.wallet);
      if (recentWallets) {
        ConnectionController.setRecentWallets(recentWallets);
      }
    }
  }, [data?.wallet]);
  const onConnect = useCallback(async () => {
    try {
      if (connector) {
        setConnectionError(false);
        setInstalledError(false);
        await ConnectionController.connectExternal(connector);
        storeDeeplink();
        ModalController.close();
        EventsController.sendEvent({
          type: 'track',
          event: 'CONNECT_SUCCESS',
          properties: {
            name: data.wallet?.name ?? 'Unknown',
            method: 'mobile'
          }
        });
      }
    } catch (error) {
      if (/(Wallet not found)/i.test(error.message)) {
        setInstalledError(true);
        setConnectionError(false);
      } else {
        setConnectionError(true);
        setInstalledError(false);
      }
      EventsController.sendEvent({
        type: 'track',
        event: 'CONNECT_ERROR',
        properties: {
          message: error?.message ?? 'Unknown'
        }
      });
    }
  }, [connector, storeDeeplink, data?.wallet]);
  const textTemplate = () => {
    const connectorName = data?.connector?.name ?? 'Wallet';
    if (connectionError) {
      return /*#__PURE__*/React.createElement(FlexView, {
        padding: ['3xs', '2xl', '0', '2xl'],
        alignItems: "center",
        style: styles.textContainer
      }, /*#__PURE__*/React.createElement(Text, {
        variant: "paragraph-500",
        color: "error-100"
      }, "Connection error"), /*#__PURE__*/React.createElement(Text, {
        center: true,
        variant: "small-400",
        color: "fg-200",
        style: styles.descriptionText
      }, "Connection can be declined if a previous request is still active"));
    } else if (installedError) {
      return /*#__PURE__*/React.createElement(FlexView, {
        padding: ['3xs', '2xl', '0', '2xl'],
        alignItems: "center",
        style: styles.textContainer
      }, /*#__PURE__*/React.createElement(Text, {
        variant: "paragraph-500"
      }, "App not installed"));
    }
    return /*#__PURE__*/React.createElement(FlexView, {
      padding: ['3xs', '2xl', '0', '2xl'],
      alignItems: "center",
      style: styles.textContainer
    }, /*#__PURE__*/React.createElement(Text, {
      variant: "paragraph-500"
    }, `Continue in ${connectorName}`), /*#__PURE__*/React.createElement(Text, {
      center: true,
      variant: "small-400",
      color: "fg-200",
      style: styles.descriptionText
    }, "Accept connection request in the wallet"));
  };
  const retryTemplate = () => {
    if (installedError) return null;
    return /*#__PURE__*/React.createElement(Button, {
      variant: "accent",
      iconLeft: "refresh",
      style: styles.retryButton,
      iconStyle: styles.retryIcon,
      onPress: onRetryPress
    }, "Try again");
  };
  useEffect(() => {
    // First connection
    if (!ready) {
      setReady(true);
      onConnect();
    }
  }, [ready, onConnect]);
  useEffect(() => {
    if (isRetrying) {
      setIsRetrying(false);
      onConnect();
    }
  }, [isRetrying, onConnect]);
  return /*#__PURE__*/React.createElement(ScrollView, {
    bounces: false,
    fadingEdgeLength: 20,
    contentContainerStyle: styles.container
  }, /*#__PURE__*/React.createElement(FlexView, {
    alignItems: "center",
    alignSelf: "center",
    padding: ['2xl', 'l', '0', 'l'],
    style: {
      width
    }
  }, /*#__PURE__*/React.createElement(LoadingThumbnail, {
    paused: connectionError || installedError
  }, /*#__PURE__*/React.createElement(WalletImage, {
    size: "lg",
    imageSrc: AssetUtil.getConnectorImage(connector),
    imageHeaders: ApiController._getApiHeaders()
  })), textTemplate(), retryTemplate()));
}
//# sourceMappingURL=index.js.map