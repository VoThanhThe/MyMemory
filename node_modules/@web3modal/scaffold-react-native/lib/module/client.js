import './config/animations';
import { AccountController, BlockchainApiController, ConnectionController, ConnectorController, EventsController, ModalController, NetworkController, OptionsController, PublicStateController, StorageUtil, ThemeController } from '@web3modal/core-react-native';

// -- Types ---------------------------------------------------------------------

// -- Client --------------------------------------------------------------------
export class Web3ModalScaffold {
  constructor(options) {
    this.initControllers(options);
  }

  // -- Public -------------------------------------------------------------------
  async open(options) {
    ModalController.open(options);
  }
  async close() {
    ModalController.close();
  }
  getThemeMode() {
    return ThemeController.state.themeMode;
  }
  getThemeVariables() {
    return ThemeController.state.themeVariables;
  }
  setThemeMode(themeMode) {
    ThemeController.setThemeMode(themeMode);
  }
  setThemeVariables(themeVariables) {
    ThemeController.setThemeVariables(themeVariables);
  }
  subscribeTheme(callback) {
    return ThemeController.subscribe(callback);
  }
  getState() {
    return {
      ...PublicStateController.state
    };
  }
  subscribeState(callback) {
    return PublicStateController.subscribe(callback);
  }
  subscribeStateKey(key, callback) {
    return PublicStateController.subscribeKey(key, callback);
  }
  subscribeConnection(callback) {
    return AccountController.subscribeConnection(callback);
  }
  setLoading(loading) {
    ModalController.setLoading(loading);
  }
  getEvent() {
    return {
      ...EventsController.state
    };
  }
  subscribeEvents(callback) {
    return EventsController.subscribe(callback);
  }

  // -- Protected ----------------------------------------------------------------
  setIsConnected = isConnected => {
    AccountController.setIsConnected(isConnected);
  };
  setCaipAddress = caipAddress => {
    AccountController.setCaipAddress(caipAddress);
  };
  setBalance = (balance, balanceSymbol) => {
    AccountController.setBalance(balance, balanceSymbol);
  };
  setProfileName = profileName => {
    AccountController.setProfileName(profileName);
  };
  setProfileImage = profileImage => {
    AccountController.setProfileImage(profileImage);
  };
  resetAccount = () => {
    AccountController.resetAccount();
  };
  setCaipNetwork = caipNetwork => {
    NetworkController.setCaipNetwork(caipNetwork);
  };
  getCaipNetwork = () => NetworkController.state.caipNetwork;
  setRequestedCaipNetworks = requestedCaipNetworks => {
    NetworkController.setRequestedCaipNetworks(requestedCaipNetworks);
  };
  getApprovedCaipNetworksData = () => NetworkController.getApprovedCaipNetworksData();
  resetNetwork = () => {
    NetworkController.resetNetwork();
  };
  setConnectors = connectors => {
    ConnectorController.setConnectors(connectors);
  };
  addConnector = connector => {
    ConnectorController.addConnector(connector);
  };
  getConnectors = () => ConnectorController.getConnectors();
  resetWcConnection = () => {
    ConnectionController.resetWcConnection();
  };
  fetchIdentity = request => BlockchainApiController.fetchIdentity(request);
  setAddressExplorerUrl = addressExplorerUrl => {
    AccountController.setAddressExplorerUrl(addressExplorerUrl);
  };

  // -- Private ------------------------------------------------------------------
  initControllers(options) {
    this.initRecentWallets(options);
    NetworkController.setClient(options.networkControllerClient);
    NetworkController.setDefaultCaipNetwork(options.defaultChain);
    OptionsController.setProjectId(options.projectId);
    OptionsController.setIncludeWalletIds(options.includeWalletIds);
    OptionsController.setExcludeWalletIds(options.excludeWalletIds);
    OptionsController.setFeaturedWalletIds(options.featuredWalletIds);
    OptionsController.setTokens(options.tokens);
    OptionsController.setCustomWallets(options.customWallets);
    OptionsController.setEnableAnalytics(options.enableAnalytics);
    OptionsController.setSdkVersion(options._sdkVersion);
    if (options.clipboardClient) {
      OptionsController.setClipboardClient(options.clipboardClient);
    }
    ConnectionController.setClient(options.connectionControllerClient);
    if (options.themeMode) {
      ThemeController.setThemeMode(options.themeMode);
    }
    if (options.themeVariables) {
      ThemeController.setThemeVariables(options.themeVariables);
    }
  }
  async initRecentWallets(options) {
    const wallets = await StorageUtil.getRecentWallets();
    const filteredWallets = wallets.filter(wallet => {
      const {
        includeWalletIds,
        excludeWalletIds
      } = options;
      if (includeWalletIds) {
        return includeWalletIds.includes(wallet.id);
      }
      if (excludeWalletIds) {
        return !excludeWalletIds.includes(wallet.id);
      }
      return true;
    });
    ConnectionController.setRecentWallets(filteredWallets);
  }
}
//# sourceMappingURL=client.js.map