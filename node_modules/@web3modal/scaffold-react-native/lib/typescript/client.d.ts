import './config/animations';
import type { AccountControllerState, ConnectionControllerClient, ModalControllerState, NetworkControllerClient, NetworkControllerState, OptionsControllerState, EventsControllerState, PublicStateControllerState, ThemeControllerState, ThemeMode, ThemeVariables } from '@web3modal/core-react-native';
import { AccountController, BlockchainApiController, ConnectionController, ConnectorController, NetworkController } from '@web3modal/core-react-native';
export interface LibraryOptions {
    projectId: OptionsControllerState['projectId'];
    themeMode?: ThemeMode;
    themeVariables?: ThemeVariables;
    includeWalletIds?: OptionsControllerState['includeWalletIds'];
    excludeWalletIds?: OptionsControllerState['excludeWalletIds'];
    featuredWalletIds?: OptionsControllerState['featuredWalletIds'];
    customWallets?: OptionsControllerState['customWallets'];
    defaultChain?: NetworkControllerState['caipNetwork'];
    tokens?: OptionsControllerState['tokens'];
    clipboardClient?: OptionsControllerState['_clipboardClient'];
    enableAnalytics?: OptionsControllerState['enableAnalytics'];
    _sdkVersion: OptionsControllerState['sdkVersion'];
}
export interface ScaffoldOptions extends LibraryOptions {
    networkControllerClient: NetworkControllerClient;
    connectionControllerClient: ConnectionControllerClient;
}
export interface OpenOptions {
    view: 'Account' | 'Connect' | 'Networks';
}
export declare class Web3ModalScaffold {
    constructor(options: ScaffoldOptions);
    open(options?: OpenOptions): Promise<void>;
    close(): Promise<void>;
    getThemeMode(): ThemeMode;
    getThemeVariables(): ThemeVariables;
    setThemeMode(themeMode: ThemeControllerState['themeMode']): void;
    setThemeVariables(themeVariables: ThemeControllerState['themeVariables']): void;
    subscribeTheme(callback: (newState: ThemeControllerState) => void): () => void;
    getState(): {
        open: boolean;
        selectedNetworkId?: `${string}:${string}` | undefined;
    };
    subscribeState(callback: (newState: PublicStateControllerState) => void): () => void;
    subscribeStateKey<K extends keyof PublicStateControllerState>(key: K, callback: (value: PublicStateControllerState[K]) => void): () => void;
    subscribeConnection(callback: (isConnected: AccountControllerState['isConnected']) => void): () => void;
    setLoading(loading: ModalControllerState['loading']): void;
    getEvent(): {
        timestamp: number;
        data: import("@web3modal/core-react-native").Event;
    };
    subscribeEvents(callback: (newEvent: EventsControllerState) => void): () => void;
    protected setIsConnected: (typeof AccountController)['setIsConnected'];
    protected setCaipAddress: (typeof AccountController)['setCaipAddress'];
    protected setBalance: (typeof AccountController)['setBalance'];
    protected setProfileName: (typeof AccountController)['setProfileName'];
    protected setProfileImage: (typeof AccountController)['setProfileImage'];
    protected resetAccount: (typeof AccountController)['resetAccount'];
    protected setCaipNetwork: (typeof NetworkController)['setCaipNetwork'];
    protected getCaipNetwork: () => import("@web3modal/core-react-native").CaipNetwork | undefined;
    protected setRequestedCaipNetworks: (typeof NetworkController)['setRequestedCaipNetworks'];
    protected getApprovedCaipNetworksData: (typeof NetworkController)['getApprovedCaipNetworksData'];
    protected resetNetwork: (typeof NetworkController)['resetNetwork'];
    protected setConnectors: (typeof ConnectorController)['setConnectors'];
    protected addConnector: (typeof ConnectorController)['addConnector'];
    protected getConnectors: (typeof ConnectorController)['getConnectors'];
    protected resetWcConnection: (typeof ConnectionController)['resetWcConnection'];
    protected fetchIdentity: (typeof BlockchainApiController)['fetchIdentity'];
    protected setAddressExplorerUrl: (typeof AccountController)['setAddressExplorerUrl'];
    private initControllers;
    private initRecentWallets;
}
//# sourceMappingURL=client.d.ts.map