"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllWalletsSearch = AllWalletsSearch;
var _valtio = require("valtio");
var _react = require("react");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AllWalletsSearch({
  searchQuery,
  columns,
  itemWidth,
  onItemPress
}) {
  const [loading, setLoading] = (0, _react.useState)(false);
  const {
    search,
    installed
  } = (0, _valtio.useSnapshot)(_coreReactNative.ApiController.state);
  const [prevSearchQuery, setPrevSearchQuery] = (0, _react.useState)('');
  const imageHeaders = _coreReactNative.ApiController._getApiHeaders();
  const {
    maxWidth,
    padding,
    isLandscape
  } = (0, _useCustomDimensions.useCustomDimensions)();
  const ITEM_HEIGHT = _uiReactNative.CardSelectHeight + _uiReactNative.Spacing.xs * 2;
  const walletTemplate = ({
    item
  }) => {
    const isInstalled = installed.find(wallet => wallet?.id === item?.id);
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      key: item?.id,
      style: [_styles.default.itemContainer, {
        width: itemWidth
      }]
    }, /*#__PURE__*/React.createElement(_uiReactNative.CardSelect, {
      imageSrc: _coreReactNative.AssetUtil.getWalletImage(item),
      imageHeaders: imageHeaders,
      name: item?.name ?? 'Unknown',
      onPress: () => onItemPress(item),
      installed: !!isInstalled
    }));
  };
  const loadingTemplate = items => {
    return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
      flexDirection: "row",
      flexWrap: "wrap",
      alignSelf: "center",
      padding: ['0', '0', 's', 'xs'],
      style: [_styles.default.container, {
        maxWidth
      }]
    }, Array.from({
      length: items
    }).map((_, index) => /*#__PURE__*/React.createElement(_reactNative.View, {
      key: index,
      style: [_styles.default.itemContainer, {
        width: itemWidth
      }]
    }, /*#__PURE__*/React.createElement(_uiReactNative.CardSelectLoader, null))));
  };
  const emptyTemplate = () => {
    return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
      alignItems: "center",
      style: [_styles.default.emptyContainer, isLandscape && _styles.default.emptyLandscape]
    }, /*#__PURE__*/React.createElement(_uiReactNative.IconBox, {
      icon: "walletPlaceholder",
      background: true,
      size: "lg",
      iconColor: "fg-200",
      backgroundColor: "gray-glass-005"
    }), /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      variant: "paragraph-500",
      color: "fg-200",
      style: _styles.default.text
    }, "No wallet found"));
  };
  const searchFetch = (0, _react.useCallback)(async () => {
    setLoading(true);
    await _coreReactNative.ApiController.searchWallet({
      search: searchQuery
    });
    setLoading(false);
  }, [searchQuery]);
  (0, _react.useEffect)(() => {
    if (prevSearchQuery !== searchQuery) {
      setPrevSearchQuery(searchQuery || '');
      searchFetch();
    }
  }, [searchQuery, prevSearchQuery, searchFetch]);
  if (loading) {
    return loadingTemplate(20);
  }
  if (search.length === 0) {
    return emptyTemplate();
  }
  return /*#__PURE__*/React.createElement(_reactNative.FlatList, {
    key: columns,
    fadingEdgeLength: 20,
    bounces: false,
    numColumns: columns,
    data: search,
    renderItem: walletTemplate,
    style: _styles.default.container,
    contentContainerStyle: [_styles.default.contentContainer, {
      paddingHorizontal: padding + _uiReactNative.Spacing.xs
    }],
    ListEmptyComponent: emptyTemplate(),
    keyExtractor: item => item.id,
    getItemLayout: (_, index) => ({
      length: ITEM_HEIGHT,
      offset: ITEM_HEIGHT * index,
      index
    })
  });
}
//# sourceMappingURL=index.js.map