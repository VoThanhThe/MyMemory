"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectingMobile = ConnectingMobile;
var _valtio = require("valtio");
var _react = require("react");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectingMobile({
  onRetry,
  onCopyUri,
  isInstalled
}) {
  const {
    data
  } = (0, _valtio.useSnapshot)(_coreReactNative.RouterController.state);
  const {
    maxWidth: width
  } = (0, _useCustomDimensions.useCustomDimensions)();
  const {
    wcUri,
    wcError
  } = (0, _valtio.useSnapshot)(_coreReactNative.ConnectionController.state);
  const [linkingError, setLinkingError] = (0, _react.useState)(false);
  const [isRetrying, setIsRetrying] = (0, _react.useState)(false);
  const [ready, setReady] = (0, _react.useState)(false);
  const showCopy = _coreReactNative.OptionsController.isClipboardAvailable() && !linkingError;
  const storeUrl = _reactNative.Platform.select({
    ios: data?.wallet?.app_store,
    android: data?.wallet?.play_store
  });
  const onRetryPress = () => {
    onRetry();
    setIsRetrying(true);
  };
  const onStorePress = () => {
    if (storeUrl) {
      _reactNative.Linking.openURL(storeUrl);
    }
  };
  const onConnect = (0, _react.useCallback)(async () => {
    try {
      const {
        name,
        mobile_link
      } = data?.wallet ?? {};
      if (name && mobile_link && wcUri) {
        setLinkingError(false);
        _coreReactNative.ConnectionController.setWcError(false);
        const {
          redirect,
          href
        } = _coreReactNative.CoreHelperUtil.formatNativeUrl(mobile_link, wcUri);
        _coreReactNative.ConnectionController.setWcLinking({
          name,
          href
        });
        _coreReactNative.ConnectionController.setPressedWallet(data?.wallet);
        await _reactNative.Linking.openURL(redirect);
        await _coreReactNative.ConnectionController.state.wcPromise;
        _coreReactNative.EventsController.sendEvent({
          type: 'track',
          event: 'CONNECT_SUCCESS',
          properties: {
            method: 'mobile',
            name: data?.wallet?.name ?? 'Unknown'
          }
        });
      }
    } catch (error) {
      setLinkingError(true);
    }
  }, [data?.wallet, wcUri]);
  const textTemplate = () => {
    const walletName = data?.wallet?.name ?? 'Wallet';
    if (linkingError) {
      return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
        padding: ['3xs', '2xl', '0', '2xl'],
        alignItems: "center",
        style: _styles.default.textContainer
      }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        variant: "paragraph-500"
      }, "App not installed"));
    } else if (wcError) {
      return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
        padding: ['3xs', '2xl', '0', '2xl'],
        alignItems: "center",
        style: _styles.default.textContainer
      }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        variant: "paragraph-500",
        color: "error-100"
      }, "Connection declined"), /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        center: true,
        variant: "small-400",
        color: "fg-200",
        style: _styles.default.descriptionText
      }, "Connection can be declined if a previous request is still active"));
    }
    return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
      padding: ['3xs', '2xl', '0', '2xl'],
      alignItems: "center",
      style: _styles.default.textContainer
    }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      variant: "paragraph-500"
    }, `Continue in ${walletName}`), /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      center: true,
      variant: "small-400",
      color: "fg-200",
      style: _styles.default.descriptionText
    }, "Accept connection request in the wallet"));
  };
  const storeTemplate = () => {
    if (!storeUrl || isInstalled) return null;
    return /*#__PURE__*/React.createElement(_uiReactNative.ActionEntry, {
      style: _styles.default.storeButton
    }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      numberOfLines: 1,
      variant: "paragraph-500",
      color: "fg-200"
    }, `Don't have ${data?.wallet?.name}?`), /*#__PURE__*/React.createElement(_uiReactNative.Button, {
      variant: "accent",
      iconRight: "chevronRightSmall",
      onPress: onStorePress,
      size: "sm",
      hitSlop: 20
    }, "Get"));
  };
  (0, _react.useEffect)(() => {
    // First connection
    if (!ready && wcUri) {
      setReady(true);
      onConnect();
    }
  }, [ready, wcUri, onConnect]);
  (0, _react.useEffect)(() => {
    if (isRetrying) {
      setIsRetrying(false);
      onConnect();
    }
  }, [wcUri, isRetrying, onConnect]);
  return /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
    bounces: false,
    fadingEdgeLength: 20,
    contentContainerStyle: _styles.default.container
  }, /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    alignItems: "center",
    alignSelf: "center",
    padding: ['2xl', 'l', '0', 'l'],
    style: {
      width
    }
  }, /*#__PURE__*/React.createElement(_uiReactNative.LoadingThumbnail, {
    paused: linkingError || wcError
  }, /*#__PURE__*/React.createElement(_uiReactNative.WalletImage, {
    size: "lg",
    imageSrc: _coreReactNative.AssetUtil.getWalletImage(data?.wallet),
    imageHeaders: _coreReactNative.ApiController._getApiHeaders()
  }), wcError && /*#__PURE__*/React.createElement(_uiReactNative.IconBox, {
    icon: 'close',
    border: true,
    background: true,
    backgroundColor: "icon-box-bg-error-100",
    size: "sm",
    iconColor: "error-100",
    style: _styles.default.errorIcon
  })), textTemplate(), !linkingError && /*#__PURE__*/React.createElement(_uiReactNative.Button, {
    variant: "accent",
    iconLeft: "refresh",
    style: _styles.default.retryButton,
    iconStyle: _styles.default.retryIcon,
    onPress: onRetryPress
  }, "Try again")), showCopy && /*#__PURE__*/React.createElement(_uiReactNative.Link, {
    iconLeft: "copySmall",
    color: "fg-200",
    style: _styles.default.copyButton,
    onPress: () => onCopyUri(wcUri)
  }, "Copy link"), storeTemplate());
}
//# sourceMappingURL=index.js.map