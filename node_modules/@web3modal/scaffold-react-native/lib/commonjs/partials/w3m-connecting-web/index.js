"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectingWeb = ConnectingWeb;
var _valtio = require("valtio");
var _react = require("react");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectingWeb({
  onCopyUri
}) {
  const {
    data
  } = (0, _valtio.useSnapshot)(_coreReactNative.RouterController.state);
  const {
    wcUri,
    wcError
  } = (0, _valtio.useSnapshot)(_coreReactNative.ConnectionController.state);
  const showCopy = _coreReactNative.OptionsController.isClipboardAvailable();
  const onConnect = (0, _react.useCallback)(async () => {
    try {
      const {
        name,
        webapp_link
      } = data?.wallet ?? {};
      if (name && webapp_link && wcUri) {
        _coreReactNative.ConnectionController.setWcError(false);
        const {
          redirect,
          href
        } = _coreReactNative.CoreHelperUtil.formatUniversalUrl(webapp_link, wcUri);
        _coreReactNative.ConnectionController.setWcLinking({
          name,
          href
        });
        _coreReactNative.ConnectionController.setPressedWallet(data?.wallet);
        await _reactNative.Linking.openURL(redirect);
        await _coreReactNative.ConnectionController.state.wcPromise;
        _coreReactNative.EventsController.sendEvent({
          type: 'track',
          event: 'CONNECT_SUCCESS',
          properties: {
            method: 'web',
            name: data?.wallet?.name ?? 'Unknown'
          }
        });
      }
    } catch {}
  }, [data?.wallet, wcUri]);
  const textTemplate = () => {
    const walletName = data?.wallet?.name ?? 'Wallet';
    if (wcError) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        variant: "paragraph-500",
        color: "error-100",
        style: _styles.default.mainText
      }, "Connection declined"), /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        center: true,
        variant: "small-400",
        color: "fg-200",
        style: _styles.default.descriptionText
      }, "Connection can be declined if a previous request is still active"));
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      variant: "paragraph-500",
      style: _styles.default.mainText
    }, `Continue in ${walletName}`), /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      center: true,
      variant: "small-400",
      color: "fg-200",
      style: _styles.default.descriptionText
    }, "Open and continue in a browser tab"));
  };
  return /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
    bounces: false,
    fadingEdgeLength: 20
  }, /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    alignItems: "center",
    padding: ['2xl', 'm', '3xl', 'm']
  }, /*#__PURE__*/React.createElement(_uiReactNative.LoadingThumbnail, {
    paused: wcError
  }, /*#__PURE__*/React.createElement(_uiReactNative.WalletImage, {
    size: "lg",
    imageSrc: _coreReactNative.AssetUtil.getWalletImage(data?.wallet),
    imageHeaders: _coreReactNative.ApiController._getApiHeaders()
  }), wcError && /*#__PURE__*/React.createElement(_uiReactNative.IconBox, {
    icon: 'close',
    border: true,
    background: true,
    backgroundColor: "icon-box-bg-error-100",
    size: "sm",
    iconColor: "error-100",
    style: _styles.default.errorIcon
  })), textTemplate(), /*#__PURE__*/React.createElement(_uiReactNative.Button, {
    variant: "accent",
    iconRight: "externalLink",
    style: _styles.default.openButton,
    onPress: onConnect
  }, "Open"), showCopy && /*#__PURE__*/React.createElement(_uiReactNative.Link, {
    iconLeft: "copySmall",
    color: "fg-200",
    style: _styles.default.copyButton,
    onPress: () => onCopyUri(wcUri)
  }, "Copy link")));
}
//# sourceMappingURL=index.js.map