"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllWalletsList = AllWalletsList;
var _react = require("react");
var _valtio = require("valtio");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _styles = _interopRequireDefault(require("./styles"));
var _UiUtil = require("../../utils/UiUtil");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AllWalletsList({
  columns,
  itemWidth,
  onItemPress
}) {
  const [loading, setLoading] = (0, _react.useState)(false);
  const [pageLoading, setPageLoading] = (0, _react.useState)(false);
  const {
    maxWidth,
    padding
  } = (0, _useCustomDimensions.useCustomDimensions)();
  const {
    installed,
    featured,
    recommended,
    wallets,
    page,
    count
  } = (0, _valtio.useSnapshot)(_coreReactNative.ApiController.state);
  const imageHeaders = _coreReactNative.ApiController._getApiHeaders();
  const preloadedWallets = installed.length + featured.length + recommended.length;
  const loadingItems = columns - (100 + preloadedWallets) % columns;
  const walletList = [...installed, ...featured, ...recommended, ...wallets, ...(pageLoading ? Array.from({
    length: loadingItems
  }) : [])];
  const ITEM_HEIGHT = _uiReactNative.CardSelectHeight + _uiReactNative.Spacing.xs * 2;
  const loadingTemplate = items => {
    return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
      flexDirection: "row",
      flexWrap: "wrap",
      alignSelf: "center",
      padding: ['0', '0', 's', 'xs'],
      style: [_styles.default.container, {
        maxWidth
      }]
    }, Array.from({
      length: items
    }).map((_, index) => /*#__PURE__*/React.createElement(_reactNative.View, {
      key: index,
      style: [_styles.default.itemContainer, {
        width: itemWidth
      }]
    }, /*#__PURE__*/React.createElement(_uiReactNative.CardSelectLoader, null))));
  };
  const walletTemplate = ({
    item,
    index
  }) => {
    const isInstalled = installed.find(wallet => wallet?.id === item?.id);
    if (!item?.id) {
      return /*#__PURE__*/React.createElement(_reactNative.View, {
        key: index,
        style: [_styles.default.itemContainer, {
          width: itemWidth
        }]
      }, /*#__PURE__*/React.createElement(_uiReactNative.CardSelectLoader, null));
    }
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      key: item?.id,
      style: [_styles.default.itemContainer, {
        width: itemWidth
      }]
    }, /*#__PURE__*/React.createElement(_uiReactNative.CardSelect, {
      imageSrc: _coreReactNative.AssetUtil.getWalletImage(item),
      imageHeaders: imageHeaders,
      name: item?.name ?? 'Unknown',
      onPress: () => onItemPress(item),
      installed: !!isInstalled
    }));
  };
  const initialFetch = async () => {
    setLoading(true);
    await _coreReactNative.ApiController.fetchWallets({
      page: 1
    });
    _UiUtil.UiUtil.createViewTransition();
    setLoading(false);
  };
  const fetchNextPage = async () => {
    if (walletList.length < count && !pageLoading) {
      setPageLoading(true);
      await _coreReactNative.ApiController.fetchWallets({
        page: page + 1
      });
      setPageLoading(false);
    }
  };
  (0, _react.useEffect)(() => {
    if (!wallets.length) {
      initialFetch();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  if (loading) {
    return loadingTemplate(20);
  }
  return /*#__PURE__*/React.createElement(_reactNative.FlatList, {
    key: columns,
    fadingEdgeLength: 20,
    bounces: false,
    numColumns: columns,
    data: walletList,
    renderItem: walletTemplate,
    style: _styles.default.container,
    contentContainerStyle: [_styles.default.contentContainer, {
      paddingHorizontal: padding + _uiReactNative.Spacing.xs
    }],
    onEndReached: fetchNextPage,
    onEndReachedThreshold: 2,
    keyExtractor: (item, index) => item?.id ?? index,
    getItemLayout: (_, index) => ({
      length: ITEM_HEIGHT,
      offset: ITEM_HEIGHT * index,
      index
    })
  });
}
//# sourceMappingURL=index.js.map