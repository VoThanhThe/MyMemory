"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectingView = ConnectingView;
var _valtio = require("valtio");
var _react = require("react");
var _coreReactNative = require("@web3modal/core-react-native");
var _w3mConnectingQrcode = require("../../partials/w3m-connecting-qrcode");
var _w3mConnectingMobile = require("../../partials/w3m-connecting-mobile");
var _w3mConnectingWeb = require("../../partials/w3m-connecting-web");
var _w3mConnectingHeader = require("../../partials/w3m-connecting-header");
var _UiUtil = require("../../utils/UiUtil");
function ConnectingView() {
  const {
    installed
  } = (0, _valtio.useSnapshot)(_coreReactNative.ApiController.state);
  const {
    data
  } = (0, _valtio.useSnapshot)(_coreReactNative.RouterController.state);
  const [lastRetry, setLastRetry] = (0, _react.useState)(Date.now());
  const isQr = !data?.wallet;
  const isInstalled = !!installed?.find(wallet => wallet.id === data?.wallet?.id);
  const [platform, setPlatform] = (0, _react.useState)();
  const [platforms, setPlatforms] = (0, _react.useState)([]);
  const initializeConnection = async (retry = false) => {
    try {
      const {
        wcPairingExpiry
      } = _coreReactNative.ConnectionController.state;
      if (retry || _coreReactNative.CoreHelperUtil.isPairingExpired(wcPairingExpiry)) {
        _coreReactNative.ConnectionController.connectWalletConnect();
        await _coreReactNative.ConnectionController.state.wcPromise;
        storeWalletConnectDeeplink();
        _coreReactNative.AccountController.setIsConnected(true);
        _coreReactNative.ModalController.close();
        if (!_coreReactNative.ConnectionController.state.wcLinking) {
          _coreReactNative.EventsController.sendEvent({
            type: 'track',
            event: 'CONNECT_SUCCESS',
            properties: {
              method: 'qrcode',
              name: 'WalletConnect'
            }
          });
        }
      }
    } catch (error) {
      _coreReactNative.ConnectionController.setWcError(true);
      if (_coreReactNative.CoreHelperUtil.isAllowedRetry(lastRetry)) {
        setLastRetry(Date.now());
        initializeConnection(true);
      }
      _coreReactNative.EventsController.sendEvent({
        type: 'track',
        event: 'CONNECT_ERROR',
        properties: {
          message: error?.message ?? 'Unknown'
        }
      });
    }
  };
  const storeWalletConnectDeeplink = async () => {
    const {
      wcLinking,
      pressedWallet
    } = _coreReactNative.ConnectionController.state;
    if (wcLinking) {
      _coreReactNative.StorageUtil.setWalletConnectDeepLink(wcLinking);
    }
    if (pressedWallet) {
      const recentWallets = await _coreReactNative.StorageUtil.setWeb3ModalRecent(pressedWallet);
      if (recentWallets) {
        _coreReactNative.ConnectionController.setRecentWallets(recentWallets);
      }
    }
  };
  const onCopyUri = uri => {
    if (_coreReactNative.OptionsController.isClipboardAvailable() && uri) {
      _coreReactNative.OptionsController.copyToClipboard(uri);
      _coreReactNative.SnackController.showSuccess('Link copied');
    }
  };
  const onSelectPlatform = tab => {
    _UiUtil.UiUtil.createViewTransition();
    setPlatform(tab);
  };
  const headerTemplate = () => {
    if (isQr) return null;
    if (platforms.length > 1) {
      return /*#__PURE__*/React.createElement(_w3mConnectingHeader.ConnectingHeader, {
        platforms: platforms,
        onSelectPlatform: onSelectPlatform
      });
    }
    return null;
  };
  const platformTemplate = () => {
    switch (platform) {
      case 'mobile':
        return /*#__PURE__*/React.createElement(_w3mConnectingMobile.ConnectingMobile, {
          onRetry: () => initializeConnection(true),
          onCopyUri: onCopyUri,
          isInstalled: isInstalled
        });
      case 'web':
        return /*#__PURE__*/React.createElement(_w3mConnectingWeb.ConnectingWeb, {
          onCopyUri: onCopyUri
        });
      default:
        return undefined;
    }
  };
  (0, _react.useEffect)(() => {
    const _platforms = [];
    if (data?.wallet?.mobile_link) {
      _platforms.push('mobile');
    }
    if (data?.wallet?.webapp_link && !isInstalled) {
      _platforms.push('web');
    }
    setPlatforms(_platforms);
    setPlatform(_platforms[0]);
  }, [data, isInstalled]);
  (0, _react.useEffect)(() => {
    initializeConnection();
    const _interval = setInterval(initializeConnection, _coreReactNative.ConstantsUtil.TEN_SEC_MS);
    return () => clearInterval(_interval);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  if (!data?.wallet) return /*#__PURE__*/React.createElement(_w3mConnectingQrcode.ConnectingQrCode, null);
  return /*#__PURE__*/React.createElement(React.Fragment, null, headerTemplate(), platformTemplate());
}
//# sourceMappingURL=index.js.map