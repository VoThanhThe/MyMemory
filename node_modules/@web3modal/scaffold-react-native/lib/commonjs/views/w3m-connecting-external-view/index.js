"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectingExternalView = ConnectingExternalView;
var _valtio = require("valtio");
var _react = require("react");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectingExternalView() {
  const {
    data
  } = (0, _valtio.useSnapshot)(_coreReactNative.RouterController.state);
  const connector = data?.connector;
  const {
    maxWidth: width
  } = (0, _useCustomDimensions.useCustomDimensions)();
  const [connectionError, setConnectionError] = (0, _react.useState)(false);
  const [installedError, setInstalledError] = (0, _react.useState)(false);
  const [isRetrying, setIsRetrying] = (0, _react.useState)(false);
  const [ready, setReady] = (0, _react.useState)(false);
  const onRetryPress = () => {
    setIsRetrying(true);
  };
  const storeDeeplink = (0, _react.useCallback)(async () => {
    if (data?.wallet) {
      const recentWallets = await _coreReactNative.StorageUtil.setWeb3ModalRecent(data.wallet);
      if (recentWallets) {
        _coreReactNative.ConnectionController.setRecentWallets(recentWallets);
      }
    }
  }, [data?.wallet]);
  const onConnect = (0, _react.useCallback)(async () => {
    try {
      if (connector) {
        setConnectionError(false);
        setInstalledError(false);
        await _coreReactNative.ConnectionController.connectExternal(connector);
        storeDeeplink();
        _coreReactNative.ModalController.close();
        _coreReactNative.EventsController.sendEvent({
          type: 'track',
          event: 'CONNECT_SUCCESS',
          properties: {
            name: data.wallet?.name ?? 'Unknown',
            method: 'mobile'
          }
        });
      }
    } catch (error) {
      if (/(Wallet not found)/i.test(error.message)) {
        setInstalledError(true);
        setConnectionError(false);
      } else {
        setConnectionError(true);
        setInstalledError(false);
      }
      _coreReactNative.EventsController.sendEvent({
        type: 'track',
        event: 'CONNECT_ERROR',
        properties: {
          message: error?.message ?? 'Unknown'
        }
      });
    }
  }, [connector, storeDeeplink, data?.wallet]);
  const textTemplate = () => {
    const connectorName = data?.connector?.name ?? 'Wallet';
    if (connectionError) {
      return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
        padding: ['3xs', '2xl', '0', '2xl'],
        alignItems: "center",
        style: _styles.default.textContainer
      }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        variant: "paragraph-500",
        color: "error-100"
      }, "Connection error"), /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        center: true,
        variant: "small-400",
        color: "fg-200",
        style: _styles.default.descriptionText
      }, "Connection can be declined if a previous request is still active"));
    } else if (installedError) {
      return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
        padding: ['3xs', '2xl', '0', '2xl'],
        alignItems: "center",
        style: _styles.default.textContainer
      }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
        variant: "paragraph-500"
      }, "App not installed"));
    }
    return /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
      padding: ['3xs', '2xl', '0', '2xl'],
      alignItems: "center",
      style: _styles.default.textContainer
    }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      variant: "paragraph-500"
    }, `Continue in ${connectorName}`), /*#__PURE__*/React.createElement(_uiReactNative.Text, {
      center: true,
      variant: "small-400",
      color: "fg-200",
      style: _styles.default.descriptionText
    }, "Accept connection request in the wallet"));
  };
  const retryTemplate = () => {
    if (installedError) return null;
    return /*#__PURE__*/React.createElement(_uiReactNative.Button, {
      variant: "accent",
      iconLeft: "refresh",
      style: _styles.default.retryButton,
      iconStyle: _styles.default.retryIcon,
      onPress: onRetryPress
    }, "Try again");
  };
  (0, _react.useEffect)(() => {
    // First connection
    if (!ready) {
      setReady(true);
      onConnect();
    }
  }, [ready, onConnect]);
  (0, _react.useEffect)(() => {
    if (isRetrying) {
      setIsRetrying(false);
      onConnect();
    }
  }, [isRetrying, onConnect]);
  return /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
    bounces: false,
    fadingEdgeLength: 20,
    contentContainerStyle: _styles.default.container
  }, /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    alignItems: "center",
    alignSelf: "center",
    padding: ['2xl', 'l', '0', 'l'],
    style: {
      width
    }
  }, /*#__PURE__*/React.createElement(_uiReactNative.LoadingThumbnail, {
    paused: connectionError || installedError
  }, /*#__PURE__*/React.createElement(_uiReactNative.WalletImage, {
    size: "lg",
    imageSrc: _coreReactNative.AssetUtil.getConnectorImage(connector),
    imageHeaders: _coreReactNative.ApiController._getApiHeaders()
  })), textTemplate(), retryTemplate()));
}
//# sourceMappingURL=index.js.map