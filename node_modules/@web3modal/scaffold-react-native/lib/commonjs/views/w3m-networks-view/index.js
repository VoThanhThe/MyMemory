"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NetworksView = NetworksView;
var _valtio = require("valtio");
var _reactNative = require("react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NetworksView() {
  const {
    isConnected
  } = (0, _valtio.useSnapshot)(_coreReactNative.AccountController.state);
  const {
    caipNetwork,
    requestedCaipNetworks,
    approvedCaipNetworkIds,
    supportsAllNetworks
  } = (0, _valtio.useSnapshot)(_coreReactNative.NetworkController.state);
  const {
    history
  } = (0, _valtio.useSnapshot)(_coreReactNative.RouterController.state);
  const imageHeaders = _coreReactNative.ApiController._getApiHeaders();
  const {
    maxWidth: width,
    padding
  } = (0, _useCustomDimensions.useCustomDimensions)();
  const numColumns = 4;
  const usableWidth = width - _uiReactNative.Spacing.xs * 2 - _uiReactNative.Spacing['4xs'];
  const itemWidth = Math.abs(Math.trunc(usableWidth / numColumns));
  const itemGap = Math.abs(Math.trunc((usableWidth - numColumns * _uiReactNative.CardSelectWidth) / numColumns) / 2);
  const onHelpPress = () => {
    _coreReactNative.RouterController.push('WhatIsANetwork');
    _coreReactNative.EventsController.sendEvent({
      type: 'track',
      event: 'CLICK_NETWORK_HELP'
    });
  };
  const networksTemplate = () => {
    if (!requestedCaipNetworks?.length) return undefined;
    const approvedIds = approvedCaipNetworkIds;
    const requested = [...requestedCaipNetworks];
    if (approvedIds?.length) {
      requested?.sort((a, b) => {
        if (approvedIds.includes(a.id) && !approvedIds.includes(b.id)) return -1;
        if (approvedIds.includes(b.id) && !approvedIds.includes(a.id)) return 1;
        return 0;
      });
    }
    const onNetworkPress = async network => {
      if (isConnected && caipNetwork?.id !== network.id) {
        if (approvedCaipNetworkIds?.includes(network.id)) {
          await _coreReactNative.NetworkController.switchActiveNetwork(network);
          if (history.length > 1) {
            _coreReactNative.RouterController.goBack();
          } else {
            _coreReactNative.ModalController.close();
          }
          _coreReactNative.EventsController.sendEvent({
            type: 'track',
            event: 'SWITCH_NETWORK',
            properties: {
              network: network.id
            }
          });
        } else if (supportsAllNetworks) {
          _coreReactNative.RouterController.push('SwitchNetwork', {
            network
          });
        }
      } else if (!isConnected) {
        _coreReactNative.NetworkController.setCaipNetwork(network);
        _coreReactNative.RouterController.push('Connect');
      }
    };
    return requested.map(network => /*#__PURE__*/React.createElement(_reactNative.View, {
      key: network.id,
      style: [_styles.default.itemContainer, {
        width: itemWidth,
        marginVertical: itemGap
      }]
    }, /*#__PURE__*/React.createElement(_uiReactNative.CardSelect, {
      name: network.name ?? 'Unknown',
      type: "network",
      imageSrc: _coreReactNative.AssetUtil.getNetworkImage(network),
      imageHeaders: imageHeaders,
      disabled: !supportsAllNetworks && !approvedCaipNetworkIds?.includes(network.id),
      selected: caipNetwork?.id === network.id,
      onPress: () => onNetworkPress(network)
    })));
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
    bounces: false,
    fadingEdgeLength: 20,
    style: {
      paddingHorizontal: padding
    }
  }, /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    flexDirection: "row",
    flexWrap: "wrap",
    padding: ['xs', 'xs', 's', 'xs']
  }, networksTemplate())), /*#__PURE__*/React.createElement(_uiReactNative.Separator, null), /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    padding: ['s', 's', '3xl', 's'],
    alignItems: "center",
    alignSelf: "center",
    style: {
      width
    }
  }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
    variant: "small-400",
    color: "fg-300",
    center: true
  }, "Your connected wallet may not support some of the networks available for this dApp"), /*#__PURE__*/React.createElement(_uiReactNative.Link, {
    size: "sm",
    iconLeft: "helpCircle",
    onPress: onHelpPress,
    style: _styles.default.helpButton
  }, "What is a network?")));
}
//# sourceMappingURL=index.js.map