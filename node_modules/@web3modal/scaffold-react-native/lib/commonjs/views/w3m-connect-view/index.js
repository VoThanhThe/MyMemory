"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectView = ConnectView;
var _valtio = require("valtio");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _UiUtil = require("../../utils/UiUtil");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectView() {
  const {
    recommended,
    featured,
    installed,
    count
  } = (0, _valtio.useSnapshot)(_coreReactNative.ApiController.state);
  const {
    recentWallets
  } = (0, _valtio.useSnapshot)(_coreReactNative.ConnectionController.state);
  const {
    connectors
  } = (0, _valtio.useSnapshot)(_coreReactNative.ConnectorController.state);
  const {
    customWallets
  } = (0, _valtio.useSnapshot)(_coreReactNative.OptionsController.state);
  const imageHeaders = _coreReactNative.ApiController._getApiHeaders();
  const {
    padding
  } = (0, _useCustomDimensions.useCustomDimensions)();
  const isWalletConnectEnabled = connectors.find(c => c.type === 'WALLET_CONNECT');
  const RECENT_COUNT = recentWallets?.length ? installed.length ? 1 : recentWallets?.length : 0;
  const onWalletPress = (wallet, isInstalled) => {
    const connector = connectors.find(c => c.explorerId === wallet.id);
    if (connector) {
      _coreReactNative.RouterController.push('ConnectingExternal', {
        connector,
        wallet
      });
    } else {
      _coreReactNative.RouterController.push('ConnectingWalletConnect', {
        wallet
      });
    }
    const platform = _coreReactNative.EventUtil.getWalletPlatform(wallet, isInstalled);
    _coreReactNative.EventsController.sendEvent({
      type: 'track',
      event: 'SELECT_WALLET',
      properties: {
        name: wallet.name ?? connector?.name ?? 'Unknown',
        platform
      }
    });
  };
  const onViewAllPress = () => {
    _coreReactNative.RouterController.push('AllWallets');
    _coreReactNative.EventsController.sendEvent({
      type: 'track',
      event: 'CLICK_ALL_WALLETS'
    });
  };
  const recentTemplate = () => {
    if (!isWalletConnectEnabled || !recentWallets?.length) {
      return null;
    }
    return recentWallets.slice(0, RECENT_COUNT).map(wallet => {
      const isInstalled = !!installed.find(installedWallet => installedWallet.id === wallet.id);
      return /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
        key: wallet?.id,
        imageSrc: _coreReactNative.AssetUtil.getWalletImage(wallet),
        imageHeaders: imageHeaders,
        name: wallet?.name ?? 'Unknown',
        onPress: () => onWalletPress(wallet, isInstalled),
        tagLabel: "Recent",
        tagVariant: "shade",
        style: _styles.default.item,
        installed: isInstalled
      });
    });
  };
  const walletsTemplate = () => {
    if (!isWalletConnectEnabled) {
      return null;
    }
    const list = filterOutRecentWallets([...installed, ...featured, ...recommended]);
    return list.slice(0, _UiUtil.UiUtil.TOTAL_VISIBLE_WALLETS - RECENT_COUNT).map(wallet => /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      key: wallet?.id,
      imageSrc: _coreReactNative.AssetUtil.getWalletImage(wallet),
      imageHeaders: imageHeaders,
      name: wallet?.name ?? 'Unknown',
      onPress: () => onWalletPress(wallet),
      style: _styles.default.item,
      installed: !!installed.find(installedWallet => installedWallet.id === wallet.id)
    }));
  };
  const customWalletsTemplate = () => {
    if (!isWalletConnectEnabled || !customWallets?.length) {
      return null;
    }
    const list = filterOutRecentWallets([...customWallets]);
    return list.map(wallet => /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      key: wallet.id,
      imageSrc: wallet.image_url,
      name: wallet.name,
      onPress: () => onWalletPress(wallet),
      style: _styles.default.item
    }));
  };
  const connectorsTemplate = () => {
    const excludeConnectors = ['WALLET_CONNECT'];
    if (isWalletConnectEnabled) {
      // use wallet from api list
      excludeConnectors.push('COINBASE');
    }
    return connectors.map(connector => {
      if (excludeConnectors.includes(connector.type)) {
        return null;
      }
      return /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
        key: connector.type,
        imageSrc: _coreReactNative.AssetUtil.getConnectorImage(connector),
        imageHeaders: imageHeaders,
        name: connector.name || 'Unknown',
        onPress: () => _coreReactNative.RouterController.push('ConnectingExternal', {
          connector
        }),
        style: _styles.default.item,
        installed: connector.installed
      });
    });
  };
  const allWalletsButton = () => {
    if (!isWalletConnectEnabled) {
      return null;
    }
    const total = installed.length + count;
    const label = total > 10 ? `${Math.floor(total / 10) * 10}+` : total;
    return /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      name: "All wallets",
      showAllWallets: true,
      tagLabel: String(label),
      tagVariant: "shade",
      onPress: onViewAllPress,
      style: _styles.default.item,
      testID: "button-all-wallets"
    });
  };
  const filterOutRecentWallets = wallets => {
    const recentIds = recentWallets?.slice(0, RECENT_COUNT).map(wallet => wallet.id);
    if (!recentIds?.length) return wallets;
    const filtered = wallets.filter(wallet => !recentIds.includes(wallet.id));
    return filtered;
  };
  return /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
    style: {
      paddingHorizontal: padding
    },
    bounces: false
  }, /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    padding: ['xs', 's', '2xl', 's']
  }, recentTemplate(), walletsTemplate(), customWalletsTemplate(), connectorsTemplate(), allWalletsButton()));
}
//# sourceMappingURL=index.js.map