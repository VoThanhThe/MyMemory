"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountView = AccountView;
var _valtio = require("valtio");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _react = require("react");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AccountView() {
  const {
    address,
    profileName,
    profileImage,
    balance,
    balanceSymbol,
    addressExplorerUrl
  } = (0, _valtio.useSnapshot)(_coreReactNative.AccountController.state);
  const [disconnecting, setDisconnecting] = (0, _react.useState)(false);
  const {
    caipNetwork
  } = (0, _valtio.useSnapshot)(_coreReactNative.NetworkController.state);
  const networkImage = _coreReactNative.AssetUtil.getNetworkImage(caipNetwork);
  const showCopy = _coreReactNative.OptionsController.isClipboardAvailable();
  const {
    padding
  } = (0, _useCustomDimensions.useCustomDimensions)();
  async function onDisconnect() {
    try {
      setDisconnecting(true);
      await _coreReactNative.ConnectionController.disconnect();
      _coreReactNative.AccountController.setIsConnected(false);
      _coreReactNative.ModalController.close();
      setDisconnecting(false);
      _coreReactNative.EventsController.sendEvent({
        type: 'track',
        event: 'DISCONNECT_SUCCESS'
      });
    } catch (error) {
      _coreReactNative.EventsController.sendEvent({
        type: 'track',
        event: 'DISCONNECT_ERROR'
      });
    }
  }
  const onExplorerPress = () => {
    if (addressExplorerUrl) {
      _reactNative.Linking.openURL(addressExplorerUrl);
    }
  };
  const onCopyAddress = () => {
    if (address) {
      _coreReactNative.OptionsController.copyToClipboard(profileName ?? address);
      _coreReactNative.SnackController.showSuccess('Address copied');
    }
  };
  const onNetworkPress = () => {
    _coreReactNative.RouterController.push('Networks');
    _coreReactNative.EventsController.sendEvent({
      type: 'track',
      event: 'CLICK_NETWORKS'
    });
  };
  const addressExplorerTemplate = () => {
    if (!addressExplorerUrl) return null;
    return /*#__PURE__*/React.createElement(_uiReactNative.Button, {
      size: "sm",
      variant: "shade",
      iconLeft: "compass",
      iconRight: "externalLink",
      onPress: onExplorerPress,
      style: {
        marginVertical: _uiReactNative.Spacing.s
      }
    }, "Block Explorer");
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_uiReactNative.IconLink, {
    icon: "close",
    style: _styles.default.closeIcon,
    onPress: _coreReactNative.ModalController.close
  }), /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
    bounces: false,
    fadingEdgeLength: 20,
    style: {
      paddingHorizontal: padding
    }
  }, /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    alignItems: "center",
    padding: ['3xl', 's', '3xl', 's']
  }, /*#__PURE__*/React.createElement(_uiReactNative.Avatar, {
    imageSrc: profileImage,
    address: profileName ?? address
  }), /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    flexDirection: "row",
    alignItems: "center",
    margin: ['s', '0', '0', '0']
  }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
    variant: "medium-title-600"
  }, profileName ? _uiReactNative.UiUtil.getTruncateString({
    string: profileName,
    charsStart: 20,
    charsEnd: 0,
    truncate: 'end'
  }) : _uiReactNative.UiUtil.getTruncateString({
    string: address ?? '',
    charsStart: 4,
    charsEnd: 6,
    truncate: 'middle'
  })), showCopy && /*#__PURE__*/React.createElement(_uiReactNative.IconLink, {
    icon: "copy",
    size: "md",
    iconColor: "fg-250",
    onPress: onCopyAddress,
    style: _styles.default.copyButton
  })), balance && /*#__PURE__*/React.createElement(_uiReactNative.Text, {
    variant: "paragraph-400",
    color: "fg-200"
  }, _coreReactNative.CoreHelperUtil.formatBalance(balance, balanceSymbol)), addressExplorerTemplate(), /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    margin: ['s', '0', '0', '0']
  }, /*#__PURE__*/React.createElement(_uiReactNative.ListItem, {
    variant: networkImage ? 'image' : 'icon',
    chevron: true,
    icon: "networkPlaceholder",
    iconVariant: "overlay",
    imageSrc: networkImage,
    imageHeaders: _coreReactNative.ApiController._getApiHeaders(),
    onPress: onNetworkPress,
    testID: "button-network"
  }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
    numberOfLines: 1,
    color: "fg-100"
  }, caipNetwork?.name)), /*#__PURE__*/React.createElement(_uiReactNative.ListItem, {
    variant: "icon",
    icon: "disconnect",
    iconVariant: "overlay",
    onPress: onDisconnect,
    loading: disconnecting,
    style: _styles.default.disconnectButton,
    testID: "button-disconnect"
  }, /*#__PURE__*/React.createElement(_uiReactNative.Text, {
    color: "fg-200"
  }, "Disconnect"))))));
}
//# sourceMappingURL=index.js.map