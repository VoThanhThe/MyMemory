import { useRef, useState } from 'react';
import { Animated, Linking, Pressable } from 'react-native';
import { useTheme } from '../../hooks/useTheme';
import { Text } from '../../components/wui-text';
import { Image } from '../../components/wui-image';
import { Icon } from '../../components/wui-icon';
import styles, { getThemedChipStyle, getThemedTextColor } from './styles';
const AnimatedPressable = Animated.createAnimatedComponent(Pressable);
export function Chip({
  link,
  imageSrc,
  icon,
  variant = 'fill',
  size = 'md',
  disabled,
  label,
  style
}) {
  const Theme = useTheme();
  const colorAnimation = useRef(new Animated.Value(0));
  const [pressed, setPressed] = useState(false);
  const themedNormalStyle = getThemedChipStyle(Theme, variant, disabled, false);
  const themedPressedStyle = getThemedChipStyle(Theme, variant, disabled, true);
  const themedTextColor = getThemedTextColor(variant, disabled, pressed);
  const iconSize = size === 'md' ? 'sm' : 'xs';
  const onPress = () => {
    Linking.canOpenURL(link).then(supported => {
      if (supported) Linking.openURL(link);
    });
  };
  const onPressIn = () => {
    Animated.timing(colorAnimation.current, {
      toValue: 1,
      useNativeDriver: false,
      duration: 200
    }).start();
    setPressed(true);
  };
  const onPressOut = () => {
    Animated.timing(colorAnimation.current, {
      toValue: 0,
      useNativeDriver: false,
      duration: 200
    }).start();
    setPressed(false);
  };
  const backgroundColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.backgroundColor, themedPressedStyle.backgroundColor]
  });
  const borderColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.borderColor, themedPressedStyle.borderColor]
  });
  return /*#__PURE__*/React.createElement(AnimatedPressable, {
    disabled: disabled,
    style: [styles.container, styles[`${size}Chip`], {
      borderColor,
      backgroundColor
    }, style],
    onPressIn: onPressIn,
    onPressOut: onPressOut,
    onPress: onPress
  }, imageSrc && /*#__PURE__*/React.createElement(Image, {
    style: [styles.image, styles[`${size}Image`], {
      borderColor: themedNormalStyle.borderColor
    }, disabled && styles.disabledImage],
    source: imageSrc
  }), /*#__PURE__*/React.createElement(Text, {
    variant: size === 'md' ? 'paragraph-600' : 'small-600',
    style: [styles.link, {
      color: Theme[themedTextColor]
    }]
  }, label || link), icon && /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: iconSize,
    color: themedTextColor,
    style: styles.icon
  }));
}
//# sourceMappingURL=index.js.map