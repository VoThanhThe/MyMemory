function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { forwardRef, useImperativeHandle, useRef } from 'react';
import { Animated, Pressable, TextInput } from 'react-native';
import { Icon } from '../../components/wui-icon';
import useAnimatedValue from '../../hooks/useAnimatedValue';
import { useTheme } from '../../hooks/useTheme';
import styles from './styles';
const AnimatedPressable = Animated.createAnimatedComponent(Pressable);
export const InputText = /*#__PURE__*/forwardRef(({
  children,
  placeholder,
  inputStyle,
  icon,
  size = 'sm',
  disabled,
  returnKeyType,
  ...rest
}, ref) => {
  const inputRef = useRef(null);
  const Theme = useTheme();
  const {
    animatedValue,
    valueRef,
    setStartValue,
    setEndValue
  } = useAnimatedValue(Theme['gray-glass-005'], Theme['gray-glass-010'], 100);
  useImperativeHandle(ref, () => ({
    clear: () => {
      if (inputRef.current) {
        inputRef.current.clear();
      }
    },
    focus: () => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    },
    blur: () => {
      if (inputRef.current) {
        inputRef.current.blur();
      }
    }
  }));
  const innerBorder = valueRef.current.interpolate({
    inputRange: [0, 1],
    outputRange: [Theme['gray-glass-005'], Theme['accent-100']]
  });
  const outerBorder = valueRef.current.interpolate({
    inputRange: [0, 1],
    outputRange: ['transparent', Theme['accent-glass-015']]
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AnimatedPressable, {
    style: [styles.outerBorder, {
      borderColor: outerBorder
    }],
    disabled: disabled,
    onPress: () => inputRef.current?.focus(),
    testID: rest.testID
  }, /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles[`${size}Container`], {
      backgroundColor: animatedValue,
      borderColor: innerBorder
    }, disabled && {
      backgroundColor: Theme['gray-glass-015']
    }]
  }, icon && /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: "md",
    color: "fg-275",
    style: styles.icon
  }), /*#__PURE__*/React.createElement(TextInput, _extends({
    ref: inputRef,
    onFocus: setEndValue,
    onBlur: setStartValue,
    placeholder: placeholder,
    placeholderTextColor: Theme['fg-275'],
    returnKeyType: returnKeyType,
    style: [styles.input, {
      color: Theme['fg-100']
    }, inputStyle],
    autoCapitalize: "none",
    autoCorrect: false,
    autoComplete: "off",
    spellCheck: false,
    selectionColor: Theme['accent-100'],
    underlineColorAndroid: "transparent",
    selectTextOnFocus: false,
    editable: !disabled
  }, rest)), children)));
});
//# sourceMappingURL=index.js.map