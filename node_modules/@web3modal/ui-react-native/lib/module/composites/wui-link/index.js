function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { Animated, Pressable } from 'react-native';
import { Icon } from '../../components/wui-icon';
import { Text } from '../../components/wui-text';
import useAnimatedValue from '../../hooks/useAnimatedValue';
import { useTheme } from '../../hooks/useTheme';
import styles from './styles';
import { FlexView } from '../../layout/wui-flex';
const AnimatedPressable = Animated.createAnimatedComponent(Pressable);
export function Link({
  children,
  disabled,
  iconLeft,
  iconRight,
  onPress,
  style,
  size = 'sm',
  color,
  ...rest
}) {
  const Theme = useTheme();
  const _color = disabled ? 'bg-300' : color ?? 'accent-100';
  const iconSize = size === 'md' ? 'sm' : 'xs';
  const {
    animatedValue,
    setStartValue,
    setEndValue
  } = useAnimatedValue('transparent', Theme['gray-glass-010']);
  return /*#__PURE__*/React.createElement(AnimatedPressable, _extends({
    disabled: disabled,
    onPress: onPress,
    onPressIn: setEndValue,
    onPressOut: setStartValue,
    style: [styles[`${size}Container`], {
      backgroundColor: animatedValue
    }, style]
  }, rest), /*#__PURE__*/React.createElement(FlexView, {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  }, iconLeft && /*#__PURE__*/React.createElement(Icon, {
    color: _color,
    name: iconLeft,
    size: iconSize,
    style: styles.iconLeft
  }), /*#__PURE__*/React.createElement(Text, {
    variant: size === 'md' ? 'paragraph-600' : 'small-600',
    color: _color
  }, children), iconRight && /*#__PURE__*/React.createElement(Icon, {
    color: _color,
    name: iconRight,
    size: iconSize,
    style: styles.iconRight
  })));
}
//# sourceMappingURL=index.js.map