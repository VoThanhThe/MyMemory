function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { useRef } from 'react';
import { Animated, Pressable } from 'react-native';
import { Text } from '../../components/wui-text';
import { Icon } from '../../components/wui-icon';
import { useTheme } from '../../hooks/useTheme';
import styles, { getThemedButtonStyle, getThemedTextStyle } from './styles';
import { FlexView } from '../../layout/wui-flex';
const AnimatedPressable = Animated.createAnimatedComponent(Pressable);
export function Button({
  children,
  size = 'md',
  variant = 'fill',
  disabled,
  onPress,
  style,
  iconLeft,
  iconRight,
  iconStyle,
  ...rest
}) {
  const Theme = useTheme();
  const themedTextStyle = getThemedTextStyle(Theme, variant, disabled);
  const colorAnimation = useRef(new Animated.Value(0));
  const iconSize = size === 'md' ? 'sm' : 'xs';
  const iconColor = variant === 'fill' ? 'inverse-100' : variant === 'accent' ? 'accent-100' : 'fg-150';
  const themedNormalStyle = getThemedButtonStyle(Theme, variant, disabled, false);
  const themedPressedStyle = getThemedButtonStyle(Theme, variant, disabled, true);
  const onPressIn = () => {
    Animated.timing(colorAnimation.current, {
      toValue: 1,
      useNativeDriver: false,
      duration: 200
    }).start();
  };
  const onPressOut = () => {
    Animated.timing(colorAnimation.current, {
      toValue: 0,
      useNativeDriver: false,
      duration: 200
    }).start();
  };
  const backgroundColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.backgroundColor, themedPressedStyle.backgroundColor]
  });
  const borderColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.borderColor, themedPressedStyle.borderColor]
  });
  return /*#__PURE__*/React.createElement(AnimatedPressable, _extends({
    disabled: disabled,
    style: [styles.button, styles[`${size}Button`], {
      backgroundColor,
      borderColor
    }, style],
    onPressIn: onPressIn,
    onPressOut: onPressOut,
    onPress: onPress
  }, rest), /*#__PURE__*/React.createElement(FlexView, {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  }, iconLeft && /*#__PURE__*/React.createElement(Icon, {
    color: iconColor,
    name: iconLeft,
    size: iconSize,
    style: [styles.iconLeft, iconStyle]
  }), /*#__PURE__*/React.createElement(Text, {
    variant: size === 'md' ? 'paragraph-600' : 'small-600',
    style: [styles.text, themedTextStyle]
  }, children), iconRight && /*#__PURE__*/React.createElement(Icon, {
    color: iconColor,
    name: iconRight,
    size: iconSize,
    style: [styles.iconRight, iconStyle]
  })));
}
//# sourceMappingURL=index.js.map