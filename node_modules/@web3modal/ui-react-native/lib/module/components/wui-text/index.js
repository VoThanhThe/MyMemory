function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { Text as NativeText } from 'react-native';
import { useTheme } from '../../hooks/useTheme';
import styles from './styles';
export function Text({
  children,
  style,
  center,
  color = 'fg-100',
  variant = 'paragraph-500',
  ...rest
}) {
  const Theme = useTheme();
  return /*#__PURE__*/React.createElement(NativeText, _extends({
    style: [styles.base, styles[variant], center && styles.center, color && {
      color: Theme[color]
    }, style]
  }, rest), children);
}
//# sourceMappingURL=index.js.map