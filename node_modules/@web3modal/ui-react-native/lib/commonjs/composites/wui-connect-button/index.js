"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectButton = ConnectButton;
var _react = require("react");
var _reactNative = require("react-native");
var _wuiText = require("../../components/wui-text");
var _useTheme = require("../../hooks/useTheme");
var _styles = _interopRequireWildcard(require("./styles"));
var _wuiLoadingSpinner = require("../../components/wui-loading-spinner");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
function ConnectButton({
  children,
  size = 'md',
  onPress,
  style,
  loading,
  ...rest
}) {
  const Theme = (0, _useTheme.useTheme)();
  const themedTextStyle = (0, _styles.getThemedTextStyle)(Theme, loading);
  const colorAnimation = (0, _react.useRef)(new _reactNative.Animated.Value(0));
  const themedNormalStyle = (0, _styles.getThemedButtonStyle)(Theme, loading, false);
  const themedPressedStyle = (0, _styles.getThemedButtonStyle)(Theme, loading, true);
  const onPressIn = () => {
    _reactNative.Animated.timing(colorAnimation.current, {
      toValue: 1,
      useNativeDriver: false,
      duration: 200
    }).start();
  };
  const onPressOut = () => {
    _reactNative.Animated.timing(colorAnimation.current, {
      toValue: 0,
      useNativeDriver: false,
      duration: 200
    }).start();
  };
  const backgroundColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.backgroundColor, themedPressedStyle.backgroundColor]
  });
  const borderColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.borderColor, themedPressedStyle.borderColor]
  });
  const loadingTemplate = () => {
    if (!loading) return null;
    return /*#__PURE__*/React.createElement(_wuiLoadingSpinner.LoadingSpinner, {
      size: size,
      style: _styles.default.loader
    });
  };
  return /*#__PURE__*/React.createElement(AnimatedPressable, _extends({
    disabled: loading,
    style: [_styles.default.button, _styles.default[`${size}Button`], {
      backgroundColor,
      borderColor
    }, style],
    onPressIn: onPressIn,
    onPressOut: onPressOut,
    onPress: onPress
  }, rest), loadingTemplate(), /*#__PURE__*/React.createElement(_wuiText.Text, {
    variant: size === 'md' ? 'paragraph-500' : 'small-600',
    style: themedTextStyle
  }, children));
}
//# sourceMappingURL=index.js.map