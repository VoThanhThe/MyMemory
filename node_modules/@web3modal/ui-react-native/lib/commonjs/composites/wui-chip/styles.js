"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemedTextColor = exports.getThemedChipStyle = exports.default = void 0;
var _reactNative = require("react-native");
var _ThemeUtil = require("../../utils/ThemeUtil");
const getThemedChipStyle = (theme, variant, disabled, pressed) => {
  const chipBaseStyle = {
    borderColor: theme['gray-glass-010']
  };
  if (disabled) {
    return {
      backgroundColor: theme['gray-glass-020'],
      borderColor: theme['gray-glass-005']
    };
  }
  if (pressed) {
    return {
      ...chipBaseStyle,
      backgroundColor: variant === 'fill' ? theme['accent-020'] : variant === 'shade' ? theme['gray-glass-020'] : theme['gray-glass-010']
    };
  }
  return {
    ...chipBaseStyle,
    backgroundColor: variant === 'fill' ? theme['accent-100'] : variant === 'shade' ? theme['gray-glass-010'] : 'transparent'
  };
};
exports.getThemedChipStyle = getThemedChipStyle;
const getThemedTextColor = (variant, disabled, pressed) => {
  if (disabled) {
    return 'fg-300';
  }
  if (pressed) {
    return variant === 'fill' ? 'inverse-100' : variant === 'shade' ? 'fg-175' : 'fg-150';
  }
  return variant === 'fill' ? 'inverse-100' : variant === 'shade' ? 'fg-200' : 'fg-150';
};
exports.getThemedTextColor = getThemedTextColor;
var _default = exports.default = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    height: 40,
    paddingHorizontal: _ThemeUtil.Spacing.xs,
    alignItems: 'center',
    borderRadius: _ThemeUtil.BorderRadius.s,
    borderWidth: 1
  },
  image: {
    borderRadius: 100,
    borderWidth: 1
  },
  smImage: {
    width: 16,
    height: 16
  },
  mdImage: {
    width: 24,
    height: 24
  },
  disabledImage: {
    opacity: 0.2
  },
  smChip: {
    height: 32
  },
  mdChip: {
    height: 40
  },
  link: {
    paddingHorizontal: _ThemeUtil.Spacing.xs
  },
  icon: {
    paddingRight: _ThemeUtil.Spacing['3xs']
  }
});
//# sourceMappingURL=styles.js.map