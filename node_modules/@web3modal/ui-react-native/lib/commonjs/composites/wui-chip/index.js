"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chip = Chip;
var _react = require("react");
var _reactNative = require("react-native");
var _useTheme = require("../../hooks/useTheme");
var _wuiText = require("../../components/wui-text");
var _wuiImage = require("../../components/wui-image");
var _wuiIcon = require("../../components/wui-icon");
var _styles = _interopRequireWildcard(require("./styles"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
function Chip({
  link,
  imageSrc,
  icon,
  variant = 'fill',
  size = 'md',
  disabled,
  label,
  style
}) {
  const Theme = (0, _useTheme.useTheme)();
  const colorAnimation = (0, _react.useRef)(new _reactNative.Animated.Value(0));
  const [pressed, setPressed] = (0, _react.useState)(false);
  const themedNormalStyle = (0, _styles.getThemedChipStyle)(Theme, variant, disabled, false);
  const themedPressedStyle = (0, _styles.getThemedChipStyle)(Theme, variant, disabled, true);
  const themedTextColor = (0, _styles.getThemedTextColor)(variant, disabled, pressed);
  const iconSize = size === 'md' ? 'sm' : 'xs';
  const onPress = () => {
    _reactNative.Linking.canOpenURL(link).then(supported => {
      if (supported) _reactNative.Linking.openURL(link);
    });
  };
  const onPressIn = () => {
    _reactNative.Animated.timing(colorAnimation.current, {
      toValue: 1,
      useNativeDriver: false,
      duration: 200
    }).start();
    setPressed(true);
  };
  const onPressOut = () => {
    _reactNative.Animated.timing(colorAnimation.current, {
      toValue: 0,
      useNativeDriver: false,
      duration: 200
    }).start();
    setPressed(false);
  };
  const backgroundColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.backgroundColor, themedPressedStyle.backgroundColor]
  });
  const borderColor = colorAnimation.current.interpolate({
    inputRange: [0, 1],
    outputRange: [themedNormalStyle.borderColor, themedPressedStyle.borderColor]
  });
  return /*#__PURE__*/React.createElement(AnimatedPressable, {
    disabled: disabled,
    style: [_styles.default.container, _styles.default[`${size}Chip`], {
      borderColor,
      backgroundColor
    }, style],
    onPressIn: onPressIn,
    onPressOut: onPressOut,
    onPress: onPress
  }, imageSrc && /*#__PURE__*/React.createElement(_wuiImage.Image, {
    style: [_styles.default.image, _styles.default[`${size}Image`], {
      borderColor: themedNormalStyle.borderColor
    }, disabled && _styles.default.disabledImage],
    source: imageSrc
  }), /*#__PURE__*/React.createElement(_wuiText.Text, {
    variant: size === 'md' ? 'paragraph-600' : 'small-600',
    style: [_styles.default.link, {
      color: Theme[themedTextColor]
    }]
  }, label || link), icon && /*#__PURE__*/React.createElement(_wuiIcon.Icon, {
    name: icon,
    size: iconSize,
    color: themedTextColor,
    style: _styles.default.icon
  }));
}
//# sourceMappingURL=index.js.map