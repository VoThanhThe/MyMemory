"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputText = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _wuiIcon = require("../../components/wui-icon");
var _useAnimatedValue = _interopRequireDefault(require("../../hooks/useAnimatedValue"));
var _useTheme = require("../../hooks/useTheme");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
const InputText = exports.InputText = /*#__PURE__*/(0, _react.forwardRef)(({
  children,
  placeholder,
  inputStyle,
  icon,
  size = 'sm',
  disabled,
  returnKeyType,
  ...rest
}, ref) => {
  const inputRef = (0, _react.useRef)(null);
  const Theme = (0, _useTheme.useTheme)();
  const {
    animatedValue,
    valueRef,
    setStartValue,
    setEndValue
  } = (0, _useAnimatedValue.default)(Theme['gray-glass-005'], Theme['gray-glass-010'], 100);
  (0, _react.useImperativeHandle)(ref, () => ({
    clear: () => {
      if (inputRef.current) {
        inputRef.current.clear();
      }
    },
    focus: () => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    },
    blur: () => {
      if (inputRef.current) {
        inputRef.current.blur();
      }
    }
  }));
  const innerBorder = valueRef.current.interpolate({
    inputRange: [0, 1],
    outputRange: [Theme['gray-glass-005'], Theme['accent-100']]
  });
  const outerBorder = valueRef.current.interpolate({
    inputRange: [0, 1],
    outputRange: ['transparent', Theme['accent-glass-015']]
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AnimatedPressable, {
    style: [_styles.default.outerBorder, {
      borderColor: outerBorder
    }],
    disabled: disabled,
    onPress: () => inputRef.current?.focus(),
    testID: rest.testID
  }, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [_styles.default[`${size}Container`], {
      backgroundColor: animatedValue,
      borderColor: innerBorder
    }, disabled && {
      backgroundColor: Theme['gray-glass-015']
    }]
  }, icon && /*#__PURE__*/React.createElement(_wuiIcon.Icon, {
    name: icon,
    size: "md",
    color: "fg-275",
    style: _styles.default.icon
  }), /*#__PURE__*/React.createElement(_reactNative.TextInput, _extends({
    ref: inputRef,
    onFocus: setEndValue,
    onBlur: setStartValue,
    placeholder: placeholder,
    placeholderTextColor: Theme['fg-275'],
    returnKeyType: returnKeyType,
    style: [_styles.default.input, {
      color: Theme['fg-100']
    }, inputStyle],
    autoCapitalize: "none",
    autoCorrect: false,
    autoComplete: "off",
    spellCheck: false,
    selectionColor: Theme['accent-100'],
    underlineColorAndroid: "transparent",
    selectTextOnFocus: false,
    editable: !disabled
  }, rest)), children)));
});
//# sourceMappingURL=index.js.map