"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemedTextStyle = exports.getThemedButtonStyle = exports.default = void 0;
var _reactNative = require("react-native");
var _ThemeUtil = require("../../utils/ThemeUtil");
const getThemedButtonStyle = (theme, variant, disabled, pressed) => {
  const buttonBaseStyle = {
    borderColor: theme['gray-glass-010']
  };
  if (disabled) {
    return {
      backgroundColor: variant === 'fill' ? theme['gray-glass-020'] : theme['gray-glass-010'],
      borderColor: theme['gray-glass-005']
    };
  }
  if (pressed) {
    return {
      ...buttonBaseStyle,
      backgroundColor: variant === 'fill' ? theme['accent-020'] : theme['gray-glass-010']
    };
  }
  return {
    ...buttonBaseStyle,
    backgroundColor: variant === 'fill' ? theme['accent-100'] : 'transparent'
  };
};
exports.getThemedButtonStyle = getThemedButtonStyle;
const getThemedTextStyle = (theme, variant, disabled) => {
  if (disabled) {
    return variant === 'fill' ? {
      color: theme['fg-300']
    } : {
      color: theme['gray-glass-020']
    };
  }
  return variant === 'fill' ? {
    color: theme['inverse-100']
  } : variant === 'accent' ? {
    color: theme['accent-100']
  } : {
    color: theme['fg-150']
  };
};
exports.getThemedTextStyle = getThemedTextStyle;
var _default = exports.default = _reactNative.StyleSheet.create({
  button: {
    paddingVertical: _ThemeUtil.Spacing['3xs'],
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: _ThemeUtil.BorderRadius.s,
    borderWidth: 1
  },
  smButton: {
    height: 32,
    paddingHorizontal: _ThemeUtil.Spacing['2xs']
  },
  mdButton: {
    height: 40,
    paddingHorizontal: _ThemeUtil.Spacing.xs
  },
  text: {
    marginHorizontal: _ThemeUtil.Spacing['3xs']
  },
  iconRight: {
    marginRight: _ThemeUtil.Spacing['3xs']
  },
  iconLeft: {
    marginLeft: _ThemeUtil.Spacing['3xs']
  }
});
//# sourceMappingURL=styles.js.map