"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Otp = Otp;
var _react = require("react");
var _reactNative = require("react-native");
var _wuiInputNumeric = require("../wui-input-numeric");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function Otp({
  length,
  style,
  onChangeText
}) {
  const [value, setValue] = (0, _react.useState)([]);
  const refArray = (0, _react.useMemo)(() => Array.from({
    length
  }).map(() => /*#__PURE__*/(0, _react.createRef)()), [length]);
  const _onChangeText = (text, index) => {
    const newValue = [...value.slice(0, index), text, ...value.slice(index + 1)];
    setValue(newValue);
    onChangeText?.(newValue.join(''));
    if (text.length === 1 && index < length - 1) {
      refArray[index + 1]?.current?.focus();
    }
  };
  const onKeyPress = (e, index) => {
    const currentValue = value[index] || '';
    if (e.nativeEvent.key !== 'Backspace' && currentValue && index !== length - 1) {
      refArray[index + 1]?.current?.focus();
      return;
    }
    if (e.nativeEvent.key === 'Backspace' && index !== 0) {
      if (!currentValue) {
        refArray[index - 1]?.current?.focus();
      }
    }
  };
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: _styles.default.container
  }, Array.from({
    length
  }).map((_, index) => /*#__PURE__*/React.createElement(_wuiInputNumeric.InputNumeric, {
    key: index,
    style: style,
    value: value[index] || '',
    inputRef: refArray[index],
    onChangeText: text => _onChangeText(text, index),
    onKeyPress: e => onKeyPress(e, index)
  })));
}
//# sourceMappingURL=index.js.map