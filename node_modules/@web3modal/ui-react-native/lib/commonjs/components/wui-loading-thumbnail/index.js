"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadingThumbnail = LoadingThumbnail;
var _react = require("react");
var _reactNative = require("react-native");
var _reactNativeSvg = _interopRequireWildcard(require("react-native-svg"));
var _useTheme = require("../../hooks/useTheme");
var _ThemeUtil = require("../../utils/ThemeUtil");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const AnimatedRect = _reactNative.Animated.createAnimatedComponent(_reactNativeSvg.Rect);
function LoadingThumbnail({
  children,
  paused,
  borderRadius = _ThemeUtil.BorderRadius.l
}) {
  const Theme = (0, _useTheme.useTheme)();
  const spinValue = (0, _react.useRef)(new _reactNative.Animated.Value(0));
  const strokeWidth = 4;
  const rectangleSize = _ThemeUtil.WalletImageSize.lg + _ThemeUtil.Spacing.l;
  const outerContainerSize = rectangleSize + strokeWidth;
  (0, _react.useEffect)(() => {
    const animation = _reactNative.Animated.timing(spinValue.current, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
      easing: _reactNative.Easing.linear
    });
    const loop = _reactNative.Animated.loop(animation);
    loop.start();
    return () => {
      loop.stop();
    };
  }, [spinValue]);

  // Calculate one side of the Rectangle with borders
  const sideLength = rectangleSize - borderRadius * 2 + Math.PI * borderRadius / 2;
  const spin = spinValue.current.interpolate({
    inputRange: [0, 1],
    outputRange: [0, -sideLength * 4]
  });
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_styles.default.container, {
      height: outerContainerSize,
      width: outerContainerSize
    }]
  }, /*#__PURE__*/React.createElement(_reactNativeSvg.default, {
    width: outerContainerSize,
    height: outerContainerSize,
    style: _styles.default.loader
  }, /*#__PURE__*/React.createElement(AnimatedRect, {
    height: rectangleSize,
    width: rectangleSize,
    stroke: paused ? 'transparent' : Theme['accent-100'],
    strokeWidth: strokeWidth,
    x: strokeWidth / 2,
    y: strokeWidth / 2,
    rx: borderRadius,
    strokeLinejoin: "round",
    strokeLinecap: "round",
    fill: "transparent",
    strokeDasharray: `${sideLength} ${sideLength * 3}`,
    strokeDashoffset: spin
  })), children ?? null);
}
//# sourceMappingURL=index.js.map